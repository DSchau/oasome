{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./src/components/map.jsx"],"names":["Index","_ref","classes","posts","data","allMarkdownRemark","edges","coords","Object","_components_tools__WEBPACK_IMPORTED_MODULE_9__","b","map","post","node","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_6__","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_3___default","container","spacing","className","spacer","item","xs","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_4___default","variant","headline","_components_posts__WEBPACK_IMPORTED_MODULE_7__","_components_map__WEBPACK_IMPORTED_MODULE_8__","cities","propTypes","prop_types__WEBPACK_IMPORTED_MODULE_1___default","shape","isRequired","pageQuery","__webpack_exports__","default","_withRoot__WEBPACK_IMPORTED_MODULE_5__","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_2__","withStyles","theme","marginBottom","unit","marginTop","padding","textAlign","ZoomPan","props","_this","_Component","call","this","state","marker","handleHover","setState","render","_this2","_this$props","center","zoom","react__WEBPACK_IMPORTED_MODULE_2___default","wrapper","react_simple_maps__WEBPACK_IMPORTED_MODULE_6__","ComposableMap","projectionConfig","scale","width","height","style","ZoomableGroup","disablePanning","Geographies","geography","_static_world_50m_simplified_json__WEBPACK_IMPORTED_MODULE_9__","geographies","projection","i","id","Geography","key","fill","stroke","strokeWidth","outline","hover","Markers","Marker","onMouseEnter","name","_tools__WEBPACK_IMPORTED_MODULE_8__","country","onMouseLeave","onClick","gatsby__WEBPACK_IMPORTED_MODULE_3__","c","push","pressed","transform","strokeLinecap","strokeMiterlimit","strokeLinejoin","d","cx","cy","r","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_5___default","N","react__WEBPACK_IMPORTED_MODULE_2__","Component","prop_types__WEBPACK_IMPORTED_MODULE_4___default","arrayOf","number","defaultProps","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_7__","margin"],"mappings":"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","file":"component---src-pages-index-jsx-5ce20cd16f17bf240524.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport withRoot from '../withRoot';\nimport App from '../components/layout';\nimport Posts from '../components/posts';\nimport Map from '../components/map';\nimport { coordinates } from '../components/tools';\n\n\nconst styles = theme => ({\n  spacer: {\n    marginBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 3,\n  },\n  headline: {\n    padding: `${theme.spacing.unit * 2} 0`,\n    textAlign: 'center',\n  },\n});\n\nfunction Index({\n  classes, data,\n}) {\n  const { edges: posts } = data.allMarkdownRemark;\n  const coords = coordinates(posts.map(post => post.node));\n  return (\n    <App>\n      <Grid container spacing={24} className={classes.spacer}>\n        <Grid item xs={12}>\n          <Typography variant=\"display1\" className={classes.headline}>\n            Latest articles\n          </Typography>\n        </Grid>\n        <Posts posts={posts} />\n        <Grid item xs={12}>\n          <Typography variant=\"display1\" className={classes.headline}>\n            Where we have been!\n          </Typography>\n        </Grid>\n        <Map cities={coords} />\n      </Grid>\n    </App>\n  );\n}\n\nIndex.propTypes = {\n  classes: PropTypes.shape().isRequired,\n  data: PropTypes.shape().isRequired,\n};\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      limit: 6\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 150)\n          id\n          timeToRead\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n            coordinates {\n              name\n              country\n              coordinates\n            }\n            country\n            cover {\n              childImageSharp{\n                fluid(maxHeight: 300) {\n                    ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default withRoot(withStyles(styles)(Index));\n","\nimport React, { Component } from 'react';\nimport { push } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n  Markers,\n  Marker,\n} from 'react-simple-maps';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { capitalize } from './tools';\nimport worldJson from '../static/world-50m-simplified.json';\n\n\nconst styles = {\n  wrapper: {\n    width: '100%',\n    margin: '0 auto',\n  },\n};\n\nclass ZoomPan extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      marker: false,\n    };\n  }\n\n  handleHover(marker) {\n    this.setState({\n      marker,\n    });\n  }\n\n  render() {\n    const {\n      cities,\n      classes,\n      center,\n      zoom,\n    } = this.props;\n\n    return (\n      <div>\n        <div className={classes.wrapper}>\n          <ComposableMap\n            projectionConfig={{\n              scale: 340,\n            }}\n            width={1400}\n            height={900}\n            style={{\n              width: '100%',\n              height: 'auto',\n            }}\n          >\n            <ZoomableGroup center={center} zoom={zoom} disablePanning>\n              <Geographies geography={worldJson}>\n                {(geographies, projection) => geographies.map((geography, i) => geography.id !== 'ATA' && (\n                  <Geography\n                    key={i}\n                    geography={geography}\n                    projection={projection}\n                    style={{\n                      default: {\n                        fill: '#f0f0f0',\n                        stroke: '#cdcdcd',\n                        strokeWidth: 0.75,\n                        outline: 'none',\n                      },\n                      hover: {\n                        fill: '#828282',\n                        stroke: '#cdcdcd',\n                        strokeWidth: 0.75,\n                        outline: 'none',\n                      },\n                    }}\n                  />\n                ))}\n              </Geographies>\n              <Markers>\n                {cities.map((marker, i) => (\n                  <Marker\n                    key={i}\n                    onMouseEnter={() => this.handleHover(`${marker.name} / ${capitalize(marker.country)}`)}\n                    onMouseLeave={() => this.handleHover(null)}\n                    onClick={() => push(`/destination/${marker.country}`)}\n                    marker={marker}\n                    style={{\n                      default: { stroke: '#505050' },\n                      hover: { stroke: '#FF5722' },\n                      pressed: { stroke: '#FF5722' },\n                    }}\n                  >\n                    <g transform=\"translate(-12, -24)\">\n                      <path\n                        fill=\"none\"\n                        strokeWidth=\"3\"\n                        strokeLinecap=\"square\"\n                        strokeMiterlimit=\"10\"\n                        strokeLinejoin=\"miter\"\n                        d=\"M20,9c0,4.9-8,13-8,13S4,13.9,4,9c0-5.1,4.1-8,8-8S20,3.9,20,9z\"\n                      />\n                      <circle\n                        fill=\"none\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"square\"\n                        strokeMiterlimit=\"10\"\n                        strokeLinejoin=\"miter\"\n                        cx=\"12\"\n                        cy=\"9\"\n                        r=\"3\"\n                      />\n                    </g>\n                  </Marker>\n                ))}\n              </Markers>\n            </ZoomableGroup>\n          </ComposableMap>\n          <Typography variant=\"headline\" className={classes.wrapper}>\n            {this.state.marker !== null ? this.state.marker : ''}\n          </Typography>\n        </div>\n      </div>\n    );\n  }\n}\n\nZoomPan.propTypes = {\n  classes: PropTypes.shape().isRequired,\n  center: PropTypes.arrayOf(PropTypes.number),\n  zoom: PropTypes.number,\n};\n\n\nZoomPan.defaultProps = {\n  center: [0, 20],\n  zoom: 1,\n};\n\n\nexport default withStyles(styles)(ZoomPan);\n"],"sourceRoot":""}