{"version":3,"sources":["webpack:///./src/components/photoComposition.jsx","webpack:///./src/templates/blogTemplate.jsx"],"names":["photoComposition_PhotoComposition","PhotoComposition","props","_this","_Component","call","this","state","lightbox","photos","JSON","parse","gotoPrevLightboxImage","photo","setState","a","gotoNextLightboxImage","openLightbox","event","preventDefault","closeLightbox","render","_this2","perline","react_default","createElement","Grid_default","container","spacing","map","i","item","xs","sm","Number","key","href","onClick","e","src","react","Component","propTypes","prop_types_default","string","isRequired","photoComposition","y","v","b","w","k","d","T","renderAst","rehype_react_default","components","photo-composition","Compiler","BlogPost","_ref","data","classes","pageContext","markdownRemark","site","similar","siteUrl","siteMetadata","frontmatter","htmlAst","excerpt","timeToRead","tableOfContents","layout","title","Helmet_default","name","content","tags","property","path","cover","childImageSharp","fluid","section","cardPost","date","className","text","expand","type","country","toc","Typography_default","variant","gutterBottom","dangerouslySetInnerHTML","__html","length","shade","filter","post","slice","component","pageQuery","shape","__webpack_exports__","default","Object","withRoot","styles","withStyles","theme","_toc","typography","body1","top","width","flexShrink","order","position","wordBreak","height","overflowY","padding","unit","display","breakpoints","up","paddingLeft","margin","listStyleType","fontSize","color","textDecoration","&:hover"],"mappings":"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","file":"component---src-templates-blog-template-jsx-84c35378058dd3f191c3.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Img from 'gatsby-image';\nimport Grid from '@material-ui/core/Grid';\nimport Lightbox from 'react-images';\n\nclass PhotoComposition extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lightbox: false,\n      photos: JSON.parse(props.photos),\n    };\n  }\n\n  // dedup this code into a component to be used with cardPost as well\n  gotoPrevLightboxImage() {\n    const { photo } = this.state;\n    this.setState({ photo: photo - 1 });\n  }\n\n  gotoNextLightboxImage() {\n    const { photo } = this.state;\n    this.setState({ photo: photo + 1 });\n  }\n\n  openLightbox(photo, event) {\n    event.preventDefault();\n    this.setState({ lightbox: true, photo });\n  }\n\n  closeLightbox() {\n    this.setState({ lightbox: false });\n  }\n\n  render() {\n    const { perline } = this.props;\n    const { photos } = this.state;\n    return (\n      <Grid container spacing={24}>\n        {photos.map((photo, i) => (\n          <Grid item xs={12} sm={12 / Number(perline)} key={i}>\n            <a href={photo} onClick={e => this.openLightbox(i, e)}>\n              <img src={photo} />\n            </a>\n          </Grid>\n        ))}\n      </Grid>\n    );\n  }\n}\n\nPhotoComposition.propTypes = {\n  photos: PropTypes.string.isRequired,\n  perline: PropTypes.string.isRequired,\n};\n\nexport default PhotoComposition;\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport rehypeReact from 'rehype-react';\n\nimport PhotoComposition from '../components/photoComposition';\nimport withRoot from '../withRoot';\nimport Section from '../components/section';\nimport App from '../components/layout';\nimport CardPost from '../components/cardPost';\n\n\nconst styles = theme => ({\n  text: {\n    ...theme.typography.body1,\n  },\n  toc: {\n    top: 90,\n    width: 162,\n    flexShrink: 0,\n    order: 2,\n    position: 'sticky',\n    wordBreak: 'break-word',\n    height: 'calc(100vh - 70px)',\n    overflowY: 'auto',\n    padding: `${theme.spacing.unit * 2}px ${theme.spacing.unit * 2}px ${theme.spacing.unit * 2}px 0`,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n    '& $ul': {\n      paddingLeft: theme.spacing.unit * 2,\n      margin: 0,\n      listStyleType: 'none',\n    },\n    '& $li': {\n      fontSize: 14,\n      padding: `${theme.spacing.unit / 2}px 0`,\n    },\n    '& $a': {\n      color: 'rgba(0, 0, 0, 0.54)',\n      textDecoration: 'none',\n      '&:hover': {\n        color: 'black',\n      },\n    },\n  },\n});\n\nconst renderAst = new rehypeReact({ // eslint-disable-line new-cap\n  createElement: React.createElement,\n  components: { 'photo-composition': PhotoComposition },\n}).Compiler;\n\nfunction BlogPost({\n  data, classes, pageContext, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark, site } = data; // data.markdownRemark holds our post data\n  const { similar } = pageContext;\n  const { siteMetadata: { siteUrl } } = site;\n  const {\n    frontmatter,\n    htmlAst,\n    excerpt,\n    timeToRead,\n    tableOfContents,\n  } = markdownRemark;\n  return (\n    <App title=\"OAsome blog\">\n      <Helmet>\n        <title>\n          {frontmatter.title}\n        </title>\n        <meta name=\"description\" content={excerpt} />\n        <meta name=\"keywords\" content={frontmatter.tags} />\n        <meta property=\"og:site_name\" content=\"OAsome secrets\" />\n        <meta property=\"og:type\" content=\"article\" />\n        <meta property=\"og:title\" content={frontmatter.title} />\n        <meta property=\"og:description\" content={excerpt} />\n        <meta property=\"og:url\" content={`${siteUrl}${frontmatter.path}`} />\n        <meta property=\"og:image\" content={`${siteUrl}${frontmatter.cover.childImageSharp.fluid.src}`} />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={frontmatter.title} />\n        <meta name=\"twitter:description\" content={excerpt} />\n        <meta name=\"twitter:url\" content={`${siteUrl}${frontmatter.path}`} />\n        <meta name=\"twitter:image\" content={`${siteUrl}${frontmatter.cover.childImageSharp.fluid.src}`} />\n      </Helmet>\n      <Section>\n        <Grid item xs={12} sm={tableOfContents ? 10 : 12}>\n          <CardPost\n            title={frontmatter.title}\n            date={frontmatter.date}\n            cover={frontmatter.cover}\n            tags={frontmatter.tags}\n            content={(\n              <div className={classes.text}>\n                {renderAst(htmlAst)}\n              </div>\n            )}\n            expand={false}\n            photos={frontmatter.photos || []}\n            type={frontmatter.type}\n            timeToRead={timeToRead}\n            country={frontmatter.country}\n          />\n        </Grid>\n        {tableOfContents\n          && (\n            <Grid item sm={2} className={classes.toc}>\n              <Typography variant=\"title\" gutterBottom>\n                Contents\n              </Typography>\n              <div dangerouslySetInnerHTML={{ __html: tableOfContents }} />\n            </Grid>\n          )\n        }\n      </Section>\n      {similar.length > 0\n        && (\n          <Section shade=\"300\">\n            <Grid item xs={12}>\n              <Typography variant=\"display1\">\n                Similar articles\n              </Typography>\n            </Grid>\n            {similar.filter(\n              post => post.frontmatter.title !== frontmatter.title,\n            ).slice(0, 8).map(post => (\n              <Grid item xs={12} sm={6} key={post.frontmatter.title}>\n                <CardPost\n                  title={post.frontmatter.title}\n                  date={post.frontmatter.date}\n                  cover={post.frontmatter.cover}\n                  tags={post.frontmatter.tags}\n                  timeToRead={post.timeToRead}\n                  type={post.frontmatter.type}\n                  content={(\n                    <Typography component=\"p\">\n                      {post.excerpt}\n                    </Typography>\n                  )}\n                  path={post.frontmatter.path}\n                  country={frontmatter.country}\n                  expand\n                />\n              </Grid>\n            ))}\n          </Section>\n        )\n      }\n    </App>\n  );\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      htmlAst\n      timeToRead\n      tableOfContents\n      excerpt(pruneLength: 150)\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n        tags\n        type\n        country\n        photos {\n          childImageSharp{\n            fluid(maxWidth: 1200) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        },\n        cover {\n          childImageSharp{\n            fluid(maxWidth: 1200) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        },\n      }\n    }\n  }\n`;\n\n\nBlogPost.propTypes = {\n  classes: PropTypes.shape().isRequired,\n  data: PropTypes.shape().isRequired,\n  pageContext: PropTypes.shape().isRequired,\n};\n\nexport default withRoot(withStyles(styles)(BlogPost));\n"],"sourceRoot":""}