{"version":3,"sources":["webpack:///./node_modules/d3-geo/src/adder.js","webpack:///./node_modules/d3-geo/src/math.js","webpack:///./node_modules/d3-geo/src/noop.js","webpack:///./node_modules/d3-geo/src/stream.js","webpack:///./node_modules/d3-geo/src/area.js","webpack:///./node_modules/d3-geo/src/cartesian.js","webpack:///./node_modules/d3-geo/src/bounds.js","webpack:///./node_modules/d3-geo/src/centroid.js","webpack:///./node_modules/d3-geo/src/constant.js","webpack:///./node_modules/d3-geo/src/compose.js","webpack:///./node_modules/d3-geo/src/rotation.js","webpack:///./node_modules/d3-geo/src/circle.js","webpack:///./node_modules/d3-geo/src/clip/buffer.js","webpack:///./node_modules/d3-geo/src/clip/line.js","webpack:///./node_modules/d3-geo/src/pointEqual.js","webpack:///./node_modules/d3-geo/src/clip/polygon.js","webpack:///./node_modules/d3-geo/src/clip/extent.js","webpack:///./node_modules/d3-geo/src/length.js","webpack:///./node_modules/d3-geo/src/polygonContains.js","webpack:///./node_modules/d3-geo/src/distance.js","webpack:///./node_modules/d3-geo/src/contains.js","webpack:///./node_modules/d3-geo/src/graticule.js","webpack:///./node_modules/d3-geo/src/interpolate.js","webpack:///./node_modules/d3-geo/src/path/area.js","webpack:///./node_modules/d3-geo/src/identity.js","webpack:///./node_modules/d3-geo/src/path/centroid.js","webpack:///./node_modules/d3-geo/src/path/bounds.js","webpack:///./node_modules/d3-geo/src/path/context.js","webpack:///./node_modules/d3-geo/src/path/measure.js","webpack:///./node_modules/d3-geo/src/path/string.js","webpack:///./node_modules/d3-geo/src/path/index.js","webpack:///./node_modules/d3-geo/src/clip/index.js","webpack:///./node_modules/d3-geo/src/clip/antimeridian.js","webpack:///./node_modules/d3-geo/src/clip/circle.js","webpack:///./node_modules/d3-geo/src/transform.js","webpack:///./node_modules/d3-geo/src/projection/fit.js","webpack:///./node_modules/d3-geo/src/projection/resample.js","webpack:///./node_modules/d3-geo/src/projection/index.js","webpack:///./node_modules/d3-geo/src/projection/conic.js","webpack:///./node_modules/d3-geo/src/projection/conicEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/cylindricalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/albers.js","webpack:///./node_modules/d3-geo/src/projection/albersUsa.js","webpack:///./node_modules/d3-geo/src/projection/azimuthal.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEqualArea.js","webpack:///./node_modules/d3-geo/src/projection/azimuthalEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/mercator.js","webpack:///./node_modules/d3-geo/src/projection/conicConformal.js","webpack:///./node_modules/d3-geo/src/projection/equirectangular.js","webpack:///./node_modules/d3-geo/src/projection/conicEquidistant.js","webpack:///./node_modules/d3-geo/src/projection/gnomonic.js","webpack:///./node_modules/d3-geo/src/projection/identity.js","webpack:///./node_modules/d3-geo/src/projection/orthographic.js","webpack:///./node_modules/d3-geo/src/projection/stereographic.js","webpack:///./node_modules/d3-geo/src/projection/transverseMercator.js","webpack:///./node_modules/d3-array/src/ascending.js","webpack:///./node_modules/d3-array/src/bisector.js","webpack:///./node_modules/d3-array/src/bisect.js","webpack:///./node_modules/d3-array/src/number.js","webpack:///./node_modules/d3-array/src/variance.js","webpack:///./node_modules/d3-array/src/deviation.js","webpack:///./node_modules/d3-array/src/extent.js","webpack:///./node_modules/d3-array/src/array.js","webpack:///./node_modules/d3-array/src/range.js","webpack:///./node_modules/d3-array/src/ticks.js","webpack:///./node_modules/d3-array/src/threshold/sturges.js","webpack:///./node_modules/d3-array/src/quantile.js","webpack:///./node_modules/d3-array/src/merge.js","webpack:///./node_modules/d3-array/src/min.js","webpack:///./node_modules/d3-array/src/transpose.js","webpack:///./node_modules/react-simple-maps/lib/utils.js","webpack:///./node_modules/react-simple-maps/lib/MapGroup.js","webpack:///./node_modules/react-simple-maps/lib/ComposableMap.js","webpack:///./node_modules/react-simple-maps/lib/projections.js","webpack:///./node_modules/react-simple-maps/lib/ZoomableGroup.js","webpack:///./node_modules/react-simple-maps/lib/ZoomableGlobe.js","webpack:///./node_modules/react-simple-maps/lib/Geographies.js","webpack:///./node_modules/react-simple-maps/lib/Geography.js","webpack:///./node_modules/react-simple-maps/lib/Marker.js","webpack:///./node_modules/react-simple-maps/lib/Markers.js","webpack:///./node_modules/react-simple-maps/lib/Line.js","webpack:///./node_modules/react-simple-maps/lib/Lines.js","webpack:///./node_modules/react-simple-maps/lib/Annotation.js","webpack:///./node_modules/react-simple-maps/lib/Annotations.js","webpack:///./node_modules/react-simple-maps/lib/Graticule.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/adder.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/math.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/noop.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/stream.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/area.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/cartesian.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/bounds.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/centroid.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/constant.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/compose.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/rotation.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/circle.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/clip/buffer.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/pointEqual.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/clip/rejoin.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/polygonContains.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/clip/index.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/clip/antimeridian.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/clip/circle.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/clip/line.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/clip/rectangle.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/length.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/interpolate.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/identity.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/path/area.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/path/bounds.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/path/string.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/transform.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/fit.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/path/measure.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/resample.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/index.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/azimuthal.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/azimuthalEqualArea.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/azimuthalEquidistant.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/equirectangular.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/gnomonic.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/orthographic.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/stereographic.js","webpack:///./node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/transverseMercator.js","webpack:///./node_modules/d3-geo-projection/src/math.js","webpack:///./node_modules/d3-geo-projection/src/airy.js","webpack:///./node_modules/d3-geo-projection/src/aitoff.js","webpack:///./node_modules/d3-geo-projection/src/armadillo.js","webpack:///./node_modules/d3-geo-projection/src/august.js","webpack:///./node_modules/d3-geo-projection/src/baker.js","webpack:///./node_modules/d3-geo-projection/src/berghaus.js","webpack:///./node_modules/d3-geo-projection/src/mollweide.js","webpack:///./node_modules/d3-geo-projection/src/boggs.js","webpack:///./node_modules/d3-geo-projection/src/parallel1.js","webpack:///./node_modules/d3-geo-projection/src/sinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/bonne.js","webpack:///./node_modules/d3-geo-projection/src/bottomley.js","webpack:///./node_modules/d3-geo-projection/src/bromley.js","webpack:///./node_modules/d3-geo-projection/src/chamberlin.js","webpack:///./node_modules/d3-geo-projection/src/collignon.js","webpack:///./node_modules/d3-geo-projection/src/craig.js","webpack:///./node_modules/d3-geo-projection/src/craster.js","webpack:///./node_modules/d3-geo-projection/src/cylindricalEqualArea.js","webpack:///./node_modules/d3-geo-projection/src/cylindricalStereographic.js","webpack:///./node_modules/d3-geo-projection/src/eckert1.js","webpack:///./node_modules/d3-geo-projection/src/eckert2.js","webpack:///./node_modules/d3-geo-projection/src/eckert3.js","webpack:///./node_modules/d3-geo-projection/src/eckert4.js","webpack:///./node_modules/d3-geo-projection/src/eckert5.js","webpack:///./node_modules/d3-geo-projection/src/eckert6.js","webpack:///./node_modules/d3-geo-projection/src/eisenlohr.js","webpack:///./node_modules/d3-geo-projection/src/fahey.js","webpack:///./node_modules/d3-geo-projection/src/foucaut.js","webpack:///./node_modules/d3-geo-projection/src/gilbert.js","webpack:///./node_modules/d3-geo-projection/src/gingery.js","webpack:///./node_modules/d3-geo-projection/src/ginzburgPolyconic.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg4.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg5.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg6.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg8.js","webpack:///./node_modules/d3-geo-projection/src/ginzburg9.js","webpack:///./node_modules/d3-geo-projection/src/square.js","webpack:///./node_modules/d3-geo-projection/src/gringorten.js","webpack:///./node_modules/d3-geo-projection/src/elliptic.js","webpack:///./node_modules/d3-geo-projection/src/guyou.js","webpack:///./node_modules/d3-geo-projection/src/hammer.js","webpack:///./node_modules/d3-geo-projection/src/hammerRetroazimuthal.js","webpack:///./node_modules/d3-geo-projection/src/healpix.js","webpack:///./node_modules/d3-geo-projection/src/hill.js","webpack:///./node_modules/d3-geo-projection/src/sinuMollweide.js","webpack:///./node_modules/d3-geo-projection/src/homolosine.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/index.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/boggs.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/homolosine.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/mollweide.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/mollweideHemispheres.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/sinuMollweide.js","webpack:///./node_modules/d3-geo-projection/src/interrupted/sinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/kavrayskiy7.js","webpack:///./node_modules/d3-geo-projection/src/lagrange.js","webpack:///./node_modules/d3-geo-projection/src/larrivee.js","webpack:///./node_modules/d3-geo-projection/src/laskowski.js","webpack:///./node_modules/d3-geo-projection/src/littrow.js","webpack:///./node_modules/d3-geo-projection/src/loximuthal.js","webpack:///./node_modules/d3-geo-projection/src/miller.js","webpack:///./node_modules/d3-geo-projection/src/modifiedStereographic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js","webpack:///./node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","webpack:///./node_modules/d3-geo-projection/src/naturalEarth.js","webpack:///./node_modules/d3-geo-projection/src/nellHammer.js","webpack:///./node_modules/d3-geo-projection/src/patterson.js","webpack:///./node_modules/d3-geo-projection/src/polyconic.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/matrix.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/index.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/octahedron.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/butterfly.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/collignon.js","webpack:///./node_modules/d3-geo-projection/src/polyhedral/waterman.js","webpack:///./node_modules/d3-geo-projection/src/noop.js","webpack:///./node_modules/d3-geo-projection/src/project/index.js","webpack:///./node_modules/d3-geo-projection/src/project/clockwise.js","webpack:///./node_modules/d3-geo-projection/src/project/contains.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/index.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/gringorten.js","webpack:///./node_modules/d3-geo-projection/src/quincuncial/peirce.js","webpack:///./node_modules/d3-geo-projection/src/quantize.js","webpack:///./node_modules/d3-geo-projection/src/rectangularPolyconic.js","webpack:///./node_modules/d3-geo-projection/src/robinson.js","webpack:///./node_modules/d3-geo-projection/src/satellite.js","webpack:///./node_modules/d3-geo-projection/src/stitch.js","webpack:///./node_modules/d3-geo-projection/src/times.js","webpack:///./node_modules/d3-geo-projection/src/twoPoint.js","webpack:///./node_modules/d3-geo-projection/src/twoPointAzimuthal.js","webpack:///./node_modules/d3-geo-projection/src/twoPointEquidistant.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten2.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten3.js","webpack:///./node_modules/d3-geo-projection/src/vanDerGrinten4.js","webpack:///./node_modules/d3-geo-projection/src/wagner4.js","webpack:///./node_modules/d3-geo-projection/src/wagner6.js","webpack:///./node_modules/d3-geo-projection/src/wagner7.js","webpack:///./node_modules/d3-geo-projection/src/wiechel.js","webpack:///./node_modules/d3-geo-projection/src/winkel3.js","webpack:///./node_modules/topojson-client/src/identity.js","webpack:///./node_modules/topojson-client/src/transform.js","webpack:///./node_modules/topojson-client/src/bbox.js","webpack:///./node_modules/topojson-client/src/reverse.js","webpack:///./node_modules/topojson-client/src/feature.js","webpack:///./node_modules/topojson-client/src/stitch.js","webpack:///./node_modules/topojson-client/src/mesh.js","webpack:///./node_modules/topojson-client/src/merge.js","webpack:///./node_modules/topojson-client/src/bisect.js","webpack:///./node_modules/topojson-client/src/neighbors.js","webpack:///./node_modules/topojson-client/src/quantize.js","webpack:///./node_modules/topojson-client/src/untransform.js","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./node_modules/react-simple-maps/lib/index.js","webpack:///./node_modules/react-simple-maps/lib/projectionConfig.js"],"names":["adder","Adder","this","reset","prototype","constructor","s","t","add","y","temp","valueOf","a","b","x","bv","av","epsilon","pi","Math","PI","halfPi","quarterPi","tau","degrees","radians","abs","atan","atan2","cos","ceil","exp","log","floor","pow","sin","math_sign","sign","sqrt","tan","acos","asin","haversin","noop","streamGeometry","geometry","stream","streamGeometryType","hasOwnProperty","type","streamObjectType","Feature","object","FeatureCollection","features","i","n","length","Sphere","sphere","Point","coordinates","point","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","lineStart","lineEnd","polygonStart","polygonEnd","area_lambda00","phi00","area_lambda0","area_cosPhi0","area_sinPhi0","src_stream","areaRingSum","areaSum","areaStream","areaRingStart","areaRingEnd","areaRing","areaPointFirst","areaPoint","lambda","phi","dLambda","sdLambda","adLambda","cosPhi","sinPhi","k","u","v","src_area","cartesian_spherical","cartesian","cartesian_cartesian","spherical","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","d","l","bounds_lambda0","bounds_phi0","bounds_lambda1","bounds_phi1","bounds_lambda2","bounds_lambda00","bounds_phi00","bounds_p0","ranges","range","deltaSum","boundsStream","boundsPoint","boundsLineStart","boundsLineEnd","boundsRingPoint","boundsRingStart","boundsRingEnd","push","bounds_linePoint","p","normal","inflection","phii","delta","lambdai","antimeridian","bounds_angle","lambda0","lambda1","rangeCompare","rangeContains","W0","W1","centroid_X0","centroid_Y0","Z0","centroid_X1","centroid_Y1","Z1","X2","Y2","Z2","centroid_lambda00","centroid_phi00","centroid_x0","centroid_y0","z0","bounds","feature","merged","deltaMax","Infinity","sort","NaN","centroidStream","centroidPoint","centroidLineStart","centroidLineEnd","centroidRingStart","centroidRingEnd","centroidPointCartesian","z","centroidLinePointFirst","centroidLinePoint","w","centroidRingPointFirst","centroidRingPoint","cx","cy","cz","m","constant","compose","invert","rotationIdentity","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","src_rotation","rotate","forward","circleStream","radius","direction","t0","t1","cosRadius","sinRadius","step","circleRadius","src_circle","ring","center","precision","circle","c","apply","arguments","r","_","buffer","line","lines","rejoin","pop","concat","shift","result","clip_line","x0","y0","x1","y1","ax","ay","dx","dy","pointEqual","Intersection","points","other","entry","o","e","clip_polygon","segments","compareIntersection","startInside","interpolate","subject","clip","forEach","segment","p0","p1","polygon_link","start","current","isSubject","array","clipMax","clipMin","extent_clipExtent","visible","from","to","a1","corner","comparePoint","ca","cb","polygon","x__","y__","v__","x_","y_","v_","first","clean","activeStream","bufferStream","clipStream","linePoint","winding","a0","j","b0","b1","cleanInside","Object","d3_array","max","min","length_lambda0","length_sinPhi0","length_cosPhi0","clip_extent","cache","cacheStream","extent","sum","polygonContains","angle","point0","phi0","sinPhi0","cosPhi0","sinPhi1","cosPhi1","point1","phi1","absDelta","arc","intersection","phiArc","lengthSum","lengthStream","lengthPointFirst","lengthLineEnd","lengthPoint","cosDelta","src_length","distance_coordinates","distance_object","distance","containsObjectType","containsGeometry","containsGeometryType","containsPoint","containsLine","containsPolygon","ab","map","ringRadians","pointRadians","contains","graticuleX","graticuleY","graticule_graticule","X1","X0","Y1","Y0","X","Y","DX","DY","graticule","filter","outline","slice","reverse","extentMajor","extentMinor","stepMajor","stepMinor","graticule10","area_x00","area_y00","area_x0","area_y0","src_interpolate","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","B","A","identity","area_areaSum","area_areaRingSum","area_areaStream","area_areaRingStart","area_areaRingEnd","area","area_areaPointFirst","area_areaPoint","centroid_x00","centroid_y00","path_centroid_x0","path_centroid_y0","path_area","re","bounds_x0","bounds_y0","bounds_x1","bounds_y1","path_bounds","path_centroid_X0","path_centroid_Y0","centroid_Z0","path_centroid_X1","path_centroid_Y1","centroid_Z1","centroid_X2","centroid_Y2","centroid_Z2","centroid_centroidStream","centroid_centroidPoint","centroid_centroidLineStart","centroid_centroidLineEnd","centroid_centroidRingStart","centroid_centroidRingEnd","centroid","centroidPointFirstLine","centroidPointLine","centroidPointFirstRing","centroidPointRing","path_centroid","je","PathContext","context","_context","_radius","pointRadius","_line","_point","closePath","moveTo","lineTo","lengthRing","measure_x00","measure_y00","measure_x0","measure_y0","measure_lengthSum","measure_lengthStream","measure_lengthPointFirst","measure_lengthPoint","measure","qe","PathString","_string","string_circle","_circle","join","projection","projectionStream","contextStream","path","src_clip","pointVisible","clipLine","sink","rotatedStart","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","clip_compareIntersection","pointLine","ringSegments","validSegment","tr","sign0","sign1","sinLambda0Lambda1","clip_circle","cr","smallRadius","notHemisphere","intersect","two","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","uu","t2","q","polar","q1","code","c0","v0","v00","point2","src_transform","methods","transformer","TransformStream","key","fitExtent","h","clipExtent","scale","translate","fitSize","size","maxDepth","cosMinDistance","resample","project","delta2","resampleLineTo","depth","d2","phi2","lambda2","x2","y2","dx2","dy2","dz","lambda00","x00","y00","a00","b00","c00","resampleStream","ringPoint","transformRadians","projection_projection","projectionMutator","projectAt","projectRotate","theta","preclip","clip_antimeridian","postclip","projectResample","projectTransform","recenter","clipAngle","conicProjection","parallels","conicEqualAreaRaw","r0","r0y","conicEqualArea","albers","projection_albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","albersUsa","streams","azimuthalRaw","azimuthalInvert","sc","cc","azimuthalEqualAreaRaw","cxcy","azimuthalEqualArea","azimuthalEquidistantRaw","azimuthalEquidistant","mercatorRaw","mercator","mercatorProjection","reclip","tany","conicConformalRaw","f","fy","conicConformal","equirectangularRaw","equirectangular","conicEquidistantRaw","g","gy","nx","conicEquidistant","gnomonicRaw","gnomonic","scaleTranslate","kx","ky","tx","ty","projection_identity","sx","sy","transform","reflectX","reflectY","orthographicRaw","orthographic","stereographicRaw","stereographic","transverseMercatorRaw","transverseMercator","Q","Bn","$n","ft","Pt","It","At","Ht","Qt","$t","zt","Ze","yr","mr","Er","wr","Pr","Sr","xr","Nr","gr","vr","Gr","Cr","zr","Rr","Lr","Ar","Tr","pr","hr","_r","kr","Ur","Dr","Yr","Br","Ir","Xr","at","U","rr","248","ascending","bisector","compare","left","lo","hi","mid","right","ascendingBisect","bisectRight","bisect","number","variance","values","valueof","value","mean","isNaN","deviation","array_array","Array","stop","e10","e5","e2","tickStep","count","step0","step1","LN10","error","sturges","LN2","quantile","i0","value0","merge","arrays","src_min","src_transpose","matrix","transpose_length","transpose","row","defineProperty","exports","calculateResizeFactor","actualDimension","baseDimension","calculateMousePosition","props","zoom","resizeFactor","width","height","reference","canRotate","reverseRotation","item","returner","isChildOfType","createNewChildren","children","child","_react2","default","cloneElement","groupName","itemName","roundPath","replace","round","createConnectorPath","connectorType","endPoint","curve","e0","e1","createTextAnchor","computeBackdrop","backdrop","originalRotation","tl","br","obj","__webpack_require__","__esModule","expectedTypes","indexOf","componentIdentifier","_createClass","defineProperties","target","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_react","MapGroup","_Component","instance","TypeError","self","call","ReferenceError","__proto__","getPrototypeOf","subClass","superClass","create","setPrototypeOf","Component","_props","style","createElement","className","defaultProps","_interopRequireDefault","_projections2","_projectionConfig2","ComposableMap","_this","bind","projectionConfig","_props2","showCenter","aspectRatio","viewBox","defs","preserveAspectRatio","fill","config","projectionName","xOffset","yOffset","baseProjection","projectionReference","_d3GeoProjection","_d3Geo","geoMercator","miller","geoMiller","times","geoTimes","robinson","geoRobinson","winkel3","geoWinkel3","eckert4","geoEckert4","geoAlbersUsa","geoOrthographic","_utils","ZoomableGroup","state","mouseX","mouseY","mouseXStart","mouseYStart","isPressed","resizeFactorX","resizeFactorY","handleMouseMove","handleMouseUp","handleMouseDown","handleTouchStart","handleTouchMove","handleResize","_ref","pageX","pageY","disablePanning","setState","_ref2","touches","onMoveEnd","_state","_ref3","_state2","onMoveStart","_ref4","evt","preventDefault","nextProps","_state3","_props3","zoomFactor","centerChanged","JSON","stringify","_props4","zoomableGroupNode","parentNode","getBoundingClientRect","xPercentageChange","yPercentageChange","_props5","window","addEventListener","preventTouchScroll","removeEventListener","_this2","_props6","_state4","ref","onMouseMove","onMouseUp","onMouseDown","onTouchStart","onTouchMove","onTouchEnd","strokeWidth","ZoomableGlobe","initialRotation","clientX","clientY","differenceX","differenceY","sensitivity","newCenter","currentCenter","zoomableGlobeNode","_topojsonClient","Geographies","geographyPaths","shouldFetchGeographies","geography","parseGeographies","fetchGeographies","nextState","disableOptimization","geographyUrl","console","warn","cancelPendingRequest","isArray","toString","objects","keys","request","XMLHttpRequest","open","onload","status","parse","responseText","onGeographyPathsLoaded","String","onerror","send","_xhr","abort","_extends","assign","source","pathCache","Geography","hover","pressed","handleMouseEnter","handleMouseLeave","handleMouseClick","handleFocus","handleBlur","persist","onClick","onMouseEnter","onMouseLeave","_props7","onFocus","_props8","onBlur","_props9","cacheId","tabable","pathString","geoPath","excludeProps","restProps","reduce","tabIndex","Marker","marker","preserveMarkerAspect","translation","lineString","isHidden","geoLength","_MapGroup2","Markers","Line","end","buildPath","buildLineString","startLineString","endLineString","Lines","Annotation","hiddenStyle","stroke","markerEnd","connectorPath","textAnchor","Annotations","computeGraticule","geoGraticule","computeOutline","Graticule","renderGraticule","graticulePath","outlinePath","globe","pointerEvents","math_epsilon","centroid_z0","rejoin_link","yt","clipRectangle","fit","fitBounds","scaleTranslateRotate","alpha","cosAlpha","sinAlpha","ai","bi","ci","fi","projectRotateTransform","fitWidth","fitHeight","math_abs","math_atan","math_atan2","math_cos","math_exp","math_floor","math_log","math_pow","src_math_sign","math_sin","math_tan","src_math_epsilon","math_epsilon2","math_pi","math_halfPi","math_quarterPi","sqrt1_2","SQRT1_2","sqrt2","math_sqrt","sqrtPi","math_tau","math_degrees","math_radians","math_asin","math_acos","sinh","cosh","airyRaw","beta","tanBeta_2","cosx","cosy","siny","cosz","z_2","cosz_2","sinz_2","tanz_2","lnsecz_2","sinz","airy","aitoffRaw","sincia","sinx","sinx_2","cosx_2","sin_2y","sin2y","cos2y","sin2x_2","fx","dxdx","dxdy","dydx","dydy","aitoff","armadilloRaw","sPhi0","tanPhi0","cosLambda","sinLambda","dxdLambda","dxdPhi","dydLambda","dydPhi","denominator","dPhi","armadillo","stream_","parallel","rotateStream","sphereStream","augustRaw","tanPhi","sin3Eta","eta","xi","cosEta","coshXi","august","sqrt8","baker_phi0","bakerRaw","cosPhi_2","tanPhi_2","baker","berghausRaw","lobes","theta0","α","cotα","berghaus","sr","delta0","mollweideBromleyTheta","cp","cpsinPhi","mollweideBromleyRaw","mollweideRaw","mollweide","boggs_k","boggs_w","boggsRaw","boggs","parallel1","sinusoidalRaw","sinusoidal","bonneRaw","cotPhi0","rho","bonne","bottomleyRaw","sinPsi","bottomley","fraction","bromleyRaw","bromley","chamberlin_distance","s1","s2","cosdLambda","sindPhi","sindLambda","chamberlin_angle","longitude","chamberlinRaw","p2","beta0","beta1","beta2","chamberlin_pointRadians","chamberlinAfrica","chamberlin","R","collignonRaw","collignon","craigRaw","cosλ","craig","sqrt3","crasterRaw","craster","cylindricalEqualArea_cylindricalEqualAreaRaw","cylindricalEqualArea","cylindricalStereographicRaw","cylindricalStereographic","eckert1Raw","eckert1","eckert2Raw","eckert2","eckert3Raw","eckert3","eckert4Raw","eckert5Raw","eckert5","eckert6Raw","eckert6","eisenlohrK","eisenlohrRaw","s0","_0","_1","cos1","v2","vm1v","vp1v","deltatDeltaLambda","deltatDeltaPhi","deltacDeltat","deltacDeltaLambda","deltacDeltaPhi","deltavDeltaLambda","deltavDeltaPhi","deltaxDeltaLambda","deltaxDeltaPhi","deltayDeltaLambda","deltayDeltaPhi","eisenlohr","faheyK","faheyRaw","fahey","foucautRaw","cosk","foucaut","gilbertForward","gilbertInvert","src_gilbert","projectionType","gilbert","property","name","gingeryRaw","rho2","r2","rhoCosAlpha","k_","s_","gingeryLength","gingeryIntegrate","dTheta","x_halfPi","rhosinAlpha","sinRhoCosAlpha","halfPi_RhoCosAlpha","gingery","cRho","sRho","ginzburgPolyconic","xB","yB","m2","dAlphadLambda","xB2","dxBdPhi","dyBdPhi","dmdPhi","mcosAlpha","msinAlpha","dAlphadPhi","ginzburg4Raw","ginzburg4","ginzburg5Raw","ginzburg5","ginzburg6Raw","ginzburg6","ginzburg8Raw","lambda4","ginzburg8","ginzburg9Raw","ginzburg9","square","projectSquare","location","gringortenRaw","sLambda","sPhi","a2","secPhi","drdPhi","dp2dPhi","mu","nu","zeta","g2","zetaMug","f2","gringorten","ellipticJ","twon","ellipticF","guyouRaw","K","psi","y_1","sinhPsi","cscPhi","cotPhi2","cotLambda2","tn","guyou","hammerRaw","hammerQuarticAuthalicRaw","hammer","coefficient","hammerRetroazimuthalRaw","hammerRetroazimuthalRotation","hammerRetroazimuthal","rotate_","healpixParallel","healpixLambert","healpixRaw","H","dy1","healpix","hillRaw","L","Bt","rho0","K2","L2","omega","sinTheta","cosTheta","Bt_Bt1","C","hill","ratio","sinuMollweidePhi","sinuMollweideY","sinuMollweideRaw","sinuMollweide","homolosineRaw","homolosine","interrupted_pointEqual","interpolateLine","resampled","lobe","bound","boggs_lobes","interrupted_boggs","interrupted","homolosine_lobes","interrupted_homolosine","mollweide_lobes","interrupted_mollweide","mollweideHemispheres_lobes","mollweideHemispheres","sinuMollweide_lobes","interrupted_sinuMollweide","sinusoidal_lobes","interrupted_sinusoidal","kavrayskiy7Raw","kavrayskiy7","lagrangeRaw","lagrange","spacing","pi_sqrt2","larriveeRaw","sqrtcosPhi","sinPhi_2","sinLambda_6","cosLambda_6","f0","f1","df0dPhi","df0dLambda","df1dPhi","df1dLambda","denom","larrivee","laskowskiRaw","lambdaPhi","laskowski","littrowRaw","y2_1","littrow","loximuthalRaw","loximuthal","millerRaw","modifiedStereographicRaw","zi","ar","deltar","deltai","sinc","modifiedStereographic_alaska","gs48","gs50","modifiedStereographic_miller","lee","modifiedStereographicAlaska","modifiedStereographic","modifiedStereographicGs48","modifiedStereographicGs50","modifiedStereographicMiller","modifiedStereographicLee","coefficients","sqrt6","sqrt7","mtFlatPolarParabolicRaw","mtFlatPolarParabolic","mtFlatPolarQuarticRaw","sinTheta_2","mtFlatPolarQuartic","mtFlatPolarSinusoidalRaw","mtFlatPolarSinusoidal","naturalEarthRaw","phi4","naturalEarth","nellHammerRaw","nellHammer","pattersonK1","pattersonK2","pattersonK3","pattersonK4","pattersonC1","pattersonC2","pattersonC3","pattersonC4","pattersonRaw","yc","patterson","polyconicRaw","polyconic","multiply","subtract","matrix_length","ru","root","face","node","recurse","parent","edges","shared","found","polyhedral_pointEqual","hasInverse","faceInvert","proj","edge","multiPoint","src_bounds","inside","some","octahedron","polyhedral_octahedron","butterfly","faceProjection","faces","polyhedral","collignon_kx","collignonK","polyhedral_collignon","pu","w5","xyz","waterman_cartesian","hexagon","waterman_spherical","cornerNormals","parents","normals","cosphi","dot","src_noop","src_project","Error","projectFeature","projectFeatureCollection","projectGeometry","id","properties","sinkPoint","sinkLine","sinkPolygon","project_points","project_lines","polygons","holes","hole","yi","pj","xj","yj","quincuncial","projectQuincuncial","quincuncial_gringorten","peirce","quantize","digits","quantizePoint","toFixed","quantizePoints","quantizePolygon","quantizeGeometry","quantizeFeature","rectangularPolyconicRaw","E","cotPhi","rectangularPolyconic","robinson_K","robinsonRaw","di","bx","by","yy","satelliteRaw","P","vertical","cosOmega","sinOmega","tilt","epsilonInverse","stitch_x0","x0e","stitch_x1","x1e","stitch_y0","y0e","stitch_y1","y1e","normalizePoint","clampPoint","clampPoints","extractFragments","fragments","pointk","xk","yk","fragmentBefore","stitchFeature","stitchGeometry","fragment","startFragment","endFragment","fragmentByStart","fragmentByEnd","index","stitch","timesRaw","twoPoint","raw","twoPointAzimuthalRaw","cosd","twoPointAzimuthalUsa","twoPointAzimuthal","twoPointEquidistantRaw","lambdaa","lambdab","z02","tanLambda0","S","za","zb","cosza","coszb","twoPointEquidistantUsa","twoPointEquidistant","vanDerGrintenRaw","A2","G","P2","P2_A2","G_P2","x2_y2","c3","m1","theta1","vanDerGrinten","vanDerGrinten2Raw","vanDerGrinten2","vanDerGrinten3Raw","vanDerGrinten3","vanDerGrinten4Raw","B2","C2","BC","B_C2","B_3C","D","D2","C_","B_C","F_","sqrtF","vanDerGrinten4","wagner4_A","wagner4_B","wagner4Raw","wagner4","wagner6Raw","wagner6","wagner7Raw","wagner7","wiechelRaw","sin1_Phi","wiechel","winkel3Raw","F","sinphi","sin_2phi","sin2phi","cos2phi","sinlambda","coslambda_2","sinlambda_2","sin2lambda_2","dxdlambda","dxdphi","dydlambda","dydphi","dlambda","dphi","Fe","Le","De","Te","Be","Ue","Xe","Ye","He","We","Ve","Qe","er","fr","lr","Mr","Or","jr","Fr","qr","Qr","Hr","Jr","Vr","$r","ro","no","uo","io","co","ao","fo","po","so","vo","ho","mo","yo","Eo","wo","ko","So","Oo","_o","zo","Ro","Go","Co","Uo","Do","Xo","qo","Ho","Vo","Zo","$o","ti","ri","ei","ii","oi","li","si","gi","vi","Oi","Si","Pi","ki","_i","ji","$e","Ke","Ri","Gi","Ci","Li","Ai","Ti","Fi","Ui","Di","Ji","Vi","Ki","Zi","cu","su","yu","ju","Ou","Nu","_u","Ru","xu","Gu","Cu","Lu","Au","To","Fo","ur","ir","Ku","na","$u","oa","ea","ra","aa","ia","ua","la","sa","fa","ha","pa","va","da","ba","ma","wa","Ma","Sa","Ea","ka","Pa","ja","_a","3373","topology","src_bbox","bbox","bboxPoint","bboxGeometry","arcs","feature_feature","feature_object","transformPoint","stitchedArcs","emptyIndex","flush","dp","fg","unshift","gf","meshArcs","geom","geomsByArc","extract0","extract1","extract2","geoms","mergeArcs","polygonsByArc","groups","extract","group","neighbors","src_neighbors","indexesByArc","geometryType","indexes","ij","ik","splice","bb","untransform","dP","FProto","Function","nameRE","get","match","391","_ComposableMap","_ZoomableGroup","_ZoomableGlobe","_Geographies","_Geography","_Marker","_Markers","_Line","_Lines","_MapGroup","_Annotation","_Annotations","_Graticule"],"mappings":"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","file":"3-70043d419d1c3394a694.js","sourcesContent":["// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nexport default function() {\n  return new Adder;\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","export default function noop() {}\n","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n","import adder from \"./adder\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nexport var areaRingSum = adder();\n\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n","import {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n","import adder from \"./adder\";\nimport {areaStream, areaRingSum} from \"./area\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport {abs, degrees, epsilon, radians} from \"./math\";\nimport stream from \"./stream\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum = adder(),\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n","import {asin, atan2, cos, degrees, epsilon, epsilon2, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 =\n  X2 = Y2 = Z2 = 0;\n  stream(object, centroidStream);\n\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z;\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z;\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n","import compose from \"./compose\";\nimport {asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport constant from \"./constant\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math\";\nimport {rotateRadians} from \"./rotation\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n","import noop from \"../noop\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n","export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n","import {abs, epsilon} from \"./math\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n","import pointEqual from \"../pointEqual\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n","import {abs, epsilon} from \"../math\";\nimport clipBuffer from \"./buffer\";\nimport clipLine from \"./line\";\nimport clipPolygon from \"./polygon\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport function clipExtent(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 960,\n      y1 = 500,\n      cache,\n      cacheStream,\n      clip;\n\n  return clip = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);\n    },\n    extent: function(_) {\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n    }\n  };\n}\n","import adder from \"./adder\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar lengthSum = adder(),\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum.reset();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n","import adder from \"./adder\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian\";\nimport {asin, atan2, cos, epsilon, pi, quarterPi, sin, tau} from \"./math\";\n\nvar sum = adder();\n\nexport default function(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n","import length from \"./length\";\n\nvar coordinates = [null, null],\n    object = {type: \"LineString\", coordinates: coordinates};\n\nexport default function(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}\n","import {default as polygonContains} from \"./polygonContains\";\nimport {default as distance} from \"./distance\";\nimport {epsilon, radians} from \"./math\";\n\nvar containsObjectType = {\n  Feature: function(object, point) {\n    return containsGeometry(object.geometry, point);\n  },\n  FeatureCollection: function(object, point) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n    return false;\n  }\n};\n\nvar containsGeometryType = {\n  Sphere: function() {\n    return true;\n  },\n  Point: function(object, point) {\n    return containsPoint(object.coordinates, point);\n  },\n  MultiPoint: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n    return false;\n  },\n  LineString: function(object, point) {\n    return containsLine(object.coordinates, point);\n  },\n  MultiLineString: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n    return false;\n  },\n  Polygon: function(object, point) {\n    return containsPolygon(object.coordinates, point);\n  },\n  MultiPolygon: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n    return false;\n  },\n  GeometryCollection: function(object, point) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n    return false;\n  }\n};\n\nfunction containsGeometry(geometry, point) {\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\n      ? containsGeometryType[geometry.type](geometry, point)\n      : false;\n}\n\nfunction containsPoint(coordinates, point) {\n  return distance(coordinates, point) === 0;\n}\n\nfunction containsLine(coordinates, point) {\n  var ab = distance(coordinates[0], coordinates[1]),\n      ao = distance(coordinates[0], point),\n      ob = distance(point, coordinates[1]);\n  return ao + ob <= ab + epsilon;\n}\n\nfunction containsPolygon(coordinates, point) {\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n}\n\nfunction ringRadians(ring) {\n  return ring = ring.map(pointRadians), ring.pop(), ring;\n}\n\nfunction pointRadians(point) {\n  return [point[0] * radians, point[1] * radians];\n}\n\nexport default function(object, point) {\n  return (object && containsObjectType.hasOwnProperty(object.type)\n      ? containsObjectType[object.type]\n      : containsGeometry)(object, point);\n}\n","import {range} from \"d3-array\";\nimport {abs, ceil, epsilon} from \"./math\";\n\nfunction graticuleX(y0, y1, dy) {\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nexport default function graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nexport function graticule10() {\n  return graticule()();\n}\n","import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n","import adder from \"../adder\";\nimport {abs} from \"../math\";\nimport noop from \"../noop\";\n\nvar areaSum = adder(),\n    areaRingSum = adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum.reset();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n","export default function(x) {\n  return x;\n}\n","import {sqrt} from \"../math\";\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;\n","import noop from \"../noop\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n","import {tau} from \"../math\";\nimport noop from \"../noop\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n","import adder from \"../adder\";\nimport {sqrt} from \"../math\";\nimport noop from \"../noop\";\n\nvar lengthSum = adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n","export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    return this._circle = circle(_), this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n","import identity from \"../identity\";\nimport stream from \"../stream\";\nimport pathArea from \"./area\";\nimport pathBounds from \"./bounds\";\nimport pathCentroid from \"./centroid\";\nimport PathContext from \"./context\";\nimport pathMeasure from \"./measure\";\nimport PathString from \"./string\";\n\nexport default function(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n","import clipBuffer from \"./buffer\";\nimport clipPolygon from \"./polygon\";\nimport {epsilon, halfPi} from \"../math\";\nimport polygonContains from \"../polygonContains\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(rotate, sink) {\n    var line = clipLine(sink),\n        rotatedStart = rotate.invert(start[0], start[1]),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, rotatedStart);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      var point = rotate(lambda, phi);\n      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      var point = rotate(lambda, phi);\n      line.point(point[0], point[1]);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      var point = rotate(lambda, phi);\n      ringSink.point(point[0], point[1]);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n","import clip from \"./index\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n","import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian\";\nimport {circleStream} from \"../circle\";\nimport {abs, cos, epsilon, pi, sqrt} from \"../math\";\nimport pointEqual from \"../pointEqual\";\nimport clip from \"./index\";\n\nexport default function(radius, delta) {\n  var cr = cos(radius),\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n","export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n","import {default as geoStream} from \"../stream\";\nimport boundsStream from \"../path/bounds\";\n\nexport function fitExtent(projection, extent, object) {\n  var w = extent[1][0] - extent[0][0],\n      h = extent[1][1] - extent[0][1],\n      clip = projection.clipExtent && projection.clipExtent();\n\n  projection\n      .scale(150)\n      .translate([0, 0]);\n\n  if (clip != null) projection.clipExtent(null);\n\n  geoStream(object, projection.stream(boundsStream));\n\n  var b = boundsStream.result(),\n      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n\n  if (clip != null) projection.clipExtent(clip);\n\n  return projection\n      .scale(k * 150)\n      .translate([x, y]);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n","import {cartesian} from \"../cartesian\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math\";\nimport {transformer} from \"../transform\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n","import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport {clipExtent} from \"../clip/extent\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport {degrees, radians, sqrt} from \"../math\";\nimport {rotateRadians} from \"../rotation\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize} from \"./fit\";\nimport resample from \"./resample\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      dx, dy, lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n      theta = null, preclip = clipAntimeridian, // clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // clip extent\n      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    point = projectRotate(point[0] * radians, point[1] * radians);\n    return [point[0] * k + dx, dy - point[1] * k];\n  }\n\n  function invert(point) {\n    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  function projectTransform(x, y) {\n    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  function recenter() {\n    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n    var center = project(lambda, phi);\n    dx = x - center[0] * k;\n    dy = y + center[1] * k;\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n","import {degrees, pi, radians} from \"../math\";\nimport {projectionMutator} from \"./index\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n","import {abs, asin, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n","import {asin, cos, sin} from \"../math\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n","import conicEqualArea from \"./conicEqualArea\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n","import {epsilon} from \"../math\";\nimport albers from \"./albers\";\nimport conicEqualArea from \"./conicEqualArea\";\nimport {fitExtent, fitSize} from \"./fit\";\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nexport default function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n","import {asin, atan2, cos, sin, sqrt} from \"../math\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {asin, sqrt} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {acos, sin} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n","import {atan, exp, halfPi, log, pi, tan, tau} from \"../math\";\nimport rotation from \"../rotation\";\nimport projection from \"./index\";\n\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n","import {abs, atan, atan2, cos, epsilon, halfPi, log, pow, sign, sin, sqrt, tan} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {mercatorRaw} from \"./mercator\";\n\nfunction tany(y) {\n  return tan((halfPi + y) / 2);\n}\n\nexport function conicConformalRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n      f = cy0 * pow(tany(y0), n) / n;\n\n  if (!n) return mercatorRaw;\n\n  function project(x, y) {\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\n    var r = f / pow(tany(y), n);\n    return [r * sin(n * x), f - r * cos(n * x)];\n  }\n\n  project.invert = function(x, y) {\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);\n    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicConformalRaw)\n      .scale(109.5)\n      .parallels([30, 30]);\n}\n","import projection from \"./index\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n","import {abs, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\nimport {conicProjection} from \"./conic\";\nimport {equirectangularRaw} from \"./equirectangular\";\n\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y, nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function(x, y) {\n    var gy = g - y;\n    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEquidistantRaw)\n      .scale(131.154)\n      .center([0, 13.9389]);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n","import {clipExtent} from \"../clip/extent\";\nimport identity from \"../identity\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize} from \"./fit\";\n\nfunction scaleTranslate(kx, ky, tx, ty) {\n  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({\n    point: function(x, y) {\n      this.stream.point(x * kx + tx, y * ky + ty);\n    }\n  });\n}\n\nexport default function() {\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity, // scale, translate and reflect\n      x0 = null, y0, x1, y1, clip = identity, // clip extent\n      cache,\n      cacheStream,\n      projection;\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return projection = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = transform(clip(cacheStream = stream));\n    },\n    clipExtent: function(_) {\n      return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    },\n    scale: function(_) {\n      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;\n    },\n    translate: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\n    },\n    reflectX: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\n    },\n    reflectY: function(_) {\n      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\n    },\n    fitExtent: function(extent, object) {\n      return fitExtent(projection, extent, object);\n    },\n    fitSize: function(size, object) {\n      return fitSize(projection, size, object);\n    }\n  };\n}\n","import {asin, cos, epsilon, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n","import {atan, exp, halfPi, log, tan} from \"../math\";\nimport {mercatorProjection} from \"./mercator\";\n\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n","export default function(x) {\n  return x === null ? NaN : +x;\n}\n","import number from \"./number\";\n\nexport default function(values, valueof) {\n  var n = values.length,\n      m = 0,\n      i = -1,\n      mean = 0,\n      value,\n      delta,\n      sum = 0;\n\n  if (valueof == null) {\n    while (++i < n) {\n      if (!isNaN(value = number(values[i]))) {\n        delta = value - mean;\n        mean += delta / ++m;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n\n  else {\n    while (++i < n) {\n      if (!isNaN(value = number(valueof(values[i], i, values)))) {\n        delta = value - mean;\n        mean += delta / ++m;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n\n  if (m > 1) return sum / (m - 1);\n}\n","import variance from \"./variance\";\n\nexport default function(array, f) {\n  var v = variance(array, f);\n  return v ? Math.sqrt(v) : v;\n}\n","export default function(values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      min,\n      max;\n\n  if (valueof == null) {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = values[i]) != null && value >= value) {\n        min = max = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = values[i]) != null) {\n            if (min > value) min = value;\n            if (max < value) max = value;\n          }\n        }\n      }\n    }\n  }\n\n  else {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\n        min = max = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = valueof(values[i], i, values)) != null) {\n            if (min > value) min = value;\n            if (max < value) max = value;\n          }\n        }\n      }\n    }\n  }\n\n  return [min, max];\n}\n","var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n","export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n","export default function(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n","import number from \"./number\";\n\nexport default function(values, p, valueof) {\n  if (valueof == null) valueof = number;\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n","export default function(arrays) {\n  var n = arrays.length,\n      m,\n      i = -1,\n      j = 0,\n      merged,\n      array;\n\n  while (++i < n) j += arrays[i].length;\n  merged = new Array(j);\n\n  while (--n >= 0) {\n    array = arrays[n];\n    m = array.length;\n    while (--m >= 0) {\n      merged[--j] = array[m];\n    }\n  }\n\n  return merged;\n}\n","export default function(values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      min;\n\n  if (valueof == null) {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = values[i]) != null && value >= value) {\n        min = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = values[i]) != null && min > value) {\n            min = value;\n          }\n        }\n      }\n    }\n  }\n\n  else {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\n        min = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = valueof(values[i], i, values)) != null && min > value) {\n            min = value;\n          }\n        }\n      }\n    }\n  }\n\n  return min;\n}\n","import min from \"./min\";\n\nexport default function(matrix) {\n  if (!(n = matrix.length)) return [];\n  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n      row[j] = matrix[j][i];\n    }\n  }\n  return transpose;\n}\n\nfunction length(d) {\n  return d.length;\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateResizeFactor = calculateResizeFactor;\nexports.calculateMousePosition = calculateMousePosition;\nexports.isChildOfType = isChildOfType;\nexports.createNewChildren = createNewChildren;\nexports.roundPath = roundPath;\nexports.createConnectorPath = createConnectorPath;\nexports.createTextAnchor = createTextAnchor;\nexports.computeBackdrop = computeBackdrop;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction calculateResizeFactor(actualDimension, baseDimension) {\n  if (actualDimension === 0) return 1;\n  return 1 / 100 * (100 / actualDimension * baseDimension);\n}\n\nfunction calculateMousePosition(direction, projection, props, zoom, resizeFactor) {\n  var center = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : props.center;\n  var width = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : props.width;\n  var height = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : props.height;\n\n  var reference = { x: 0, y: 1 };\n  var canRotate = !!projection.rotate;\n  var reverseRotation = !!canRotate ? projection.rotate().map(function (item) {\n    return -item;\n  }) : false;\n  var point = !!reverseRotation ? projection.rotate(reverseRotation)([-center[0], -center[1]]) : projection([center[0], center[1]]);\n  var returner = point ? (point[reference[direction]] - (reference[direction] === 0 ? width : height) / 2) * zoom * (1 / resizeFactor) : 0;\n  if (canRotate) projection.rotate([-reverseRotation[0], -reverseRotation[1], -reverseRotation[2]]);\n  return !!reverseRotation ? returner : -returner;\n}\n\nfunction isChildOfType(child, expectedTypes) {\n  return expectedTypes.indexOf(child.props.componentIdentifier) !== -1;\n}\n\nfunction createNewChildren(children, props) {\n  if (!children) return;\n  if (!children.length) {\n    return isChildOfType(children, [\"Geographies\"]) ? _react2.default.cloneElement(children, {\n      projection: props.projection\n    }) : isChildOfType(children, [\"Group\", \"Markers\", \"Lines\", \"Annotations\", \"Annotation\", \"Graticule\"]) ? _react2.default.cloneElement(children, {\n      projection: props.projection,\n      zoom: props.zoom,\n      width: props.width,\n      height: props.height,\n      groupName: props.groupName,\n      itemName: props.itemName\n    }) : children;\n  } else {\n    return children.map(function (child, i) {\n      if (!child) return;\n      return isChildOfType(child, [\"Geographies\"]) ? _react2.default.cloneElement(child, {\n        key: \"zoomable-child-\" + i,\n        projection: props.projection\n      }) : isChildOfType(child, [\"Group\", \"Markers\", \"Lines\", \"Annotations\", \"Annotation\", \"Graticule\"]) ? _react2.default.cloneElement(child, {\n        key: \"zoomable-child-\" + i,\n        projection: props.projection,\n        zoom: props.zoom,\n        width: props.width,\n        height: props.height,\n        groupName: props.groupName,\n        itemName: props.itemName\n      }) : child;\n    });\n  }\n}\n\nfunction roundPath(path, precision) {\n  if (!path) return;\n  var query = /[\\d\\.-][\\d\\.e-]*/g;\n  return path.replace(query, function (n) {\n    return Math.round(n * (1 / precision)) / (1 / precision);\n  });\n}\n\nfunction createConnectorPath(connectorType, endPoint, curve) {\n  var e0 = endPoint[0];\n  var e1 = endPoint[1];\n  return \"M0,0 Q \" + (curve + 1) / 2 * e0 + \",\" + (e1 - (curve + 1) / 2 * e1) + \" \" + e0 + \",\" + e1;\n}\n\nfunction createTextAnchor(dx) {\n  if (dx > 0) return \"start\";else if (dx < 0) return \"end\";else return \"middle\";\n}\n\nfunction computeBackdrop(projection, backdrop) {\n  var canRotate = projection.rotate;\n  var originalRotation = canRotate ? projection.rotate() : null;\n\n  var tl = canRotate ? projection.rotate([0, 0, 0])([backdrop.x[0], backdrop.y[0]]) : projection([backdrop.x[0], backdrop.y[0]]);\n\n  var br = canRotate ? projection.rotate([0, 0, 0])([backdrop.x[1], backdrop.y[1]]) : projection([backdrop.x[1], backdrop.y[1]]);\n\n  var x = tl ? tl[0] : 0;\n  var x0 = br ? br[0] : 0;\n\n  var y = tl ? tl[1] : 0;\n  var y0 = br ? br[1] : 0;\n\n  var width = x0 - x;\n  var height = y0 - y;\n\n  if (originalRotation) projection.rotate(originalRotation);\n\n  return { x: x, y: y, width: width, height: height };\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MapGroup = function (_Component) {\n  _inherits(MapGroup, _Component);\n\n  function MapGroup() {\n    _classCallCheck(this, MapGroup);\n\n    return _possibleConstructorReturn(this, (MapGroup.__proto__ || Object.getPrototypeOf(MapGroup)).apply(this, arguments));\n  }\n\n  _createClass(MapGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          projection = _props.projection,\n          style = _props.style,\n          zoom = _props.zoom,\n          width = _props.width,\n          height = _props.height,\n          groupName = _props.groupName,\n          itemName = _props.itemName;\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-\" + groupName, style: style },\n        !children ? null : children.length === undefined ? _react2.default.cloneElement(children, {\n          projection: projection,\n          zoom: zoom,\n          width: width,\n          height: height\n        }) : children.map(function (child, i) {\n          return !child ? null : _react2.default.cloneElement(child, {\n            key: child.key || itemName + \"-\" + i,\n            projection: projection,\n            zoom: zoom,\n            width: width,\n            height: height\n          });\n        })\n      );\n    }\n  }]);\n\n  return MapGroup;\n}(_react.Component);\n\nMapGroup.defaultProps = {\n  componentIdentifier: \"Group\",\n  groupName: \"group\",\n  itemName: \"group-item\"\n};\n\nexports.default = MapGroup;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _projections = require(\"./projections\");\n\nvar _projections2 = _interopRequireDefault(_projections);\n\nvar _projectionConfig = require(\"./projectionConfig\");\n\nvar _projectionConfig2 = _interopRequireDefault(_projectionConfig);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ComposableMap = function (_Component) {\n  _inherits(ComposableMap, _Component);\n\n  function ComposableMap() {\n    _classCallCheck(this, ComposableMap);\n\n    var _this = _possibleConstructorReturn(this, (ComposableMap.__proto__ || Object.getPrototypeOf(ComposableMap)).call(this));\n\n    _this.projection = _this.projection.bind(_this);\n    return _this;\n  }\n\n  _createClass(ComposableMap, [{\n    key: \"projection\",\n    value: function projection() {\n      var _props = this.props,\n          projection = _props.projection,\n          projectionConfig = _props.projectionConfig,\n          width = _props.width,\n          height = _props.height;\n\n\n      return typeof projection !== \"function\" ? (0, _projections2.default)(width, height, projectionConfig, projection) : projection(width, height, projectionConfig);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props2 = this.props,\n          width = _props2.width,\n          height = _props2.height,\n          style = _props2.style,\n          className = _props2.className,\n          showCenter = _props2.showCenter,\n          children = _props2.children,\n          aspectRatio = _props2.aspectRatio,\n          viewBox = _props2.viewBox,\n          defs = _props2.defs;\n\n\n      return _react2.default.createElement(\n        \"svg\",\n        { width: width,\n          height: height,\n          viewBox: viewBox ? viewBox : \"0 0 \" + width + \" \" + height,\n          className: \"rsm-svg \" + (className || ''),\n          style: style,\n          preserveAspectRatio: aspectRatio },\n        defs && _react2.default.createElement(\n          \"defs\",\n          null,\n          defs\n        ),\n        _react2.default.cloneElement(this.props.children, {\n          projection: this.projection(),\n          width: width,\n          height: height\n        }),\n        showCenter && _react2.default.createElement(\n          \"g\",\n          null,\n          _react2.default.createElement(\"rect\", { x: width / 2 - 0.5, y: 0, width: 1, height: height, fill: \"#e91e63\" }),\n          _react2.default.createElement(\"rect\", { x: 0, y: height / 2 - 0.5, width: width, height: 1, fill: \"#e91e63\" })\n        )\n      );\n    }\n  }]);\n\n  return ComposableMap;\n}(_react.Component);\n\nComposableMap.defaultProps = {\n  width: 800,\n  height: 450,\n  projection: \"times\",\n  projectionConfig: _projectionConfig2.default,\n  aspectRatio: \"xMidYMid\",\n  viewBox: null\n};\n\nexports.default = ComposableMap;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (width, height, config, projectionName) {\n\n  var scale = config.scale || _projectionConfig2.default.scale;\n  var xOffset = config.xOffset || _projectionConfig2.default.xOffset;\n  var yOffset = config.yOffset || _projectionConfig2.default.yOffset;\n  var rotation = config.rotation || _projectionConfig2.default.rotation;\n  var precision = config.precision || _projectionConfig2.default.precision;\n\n  var baseProjection = projectionReference[projectionName]().scale(scale).translate([xOffset + width / 2, yOffset + height / 2]).precision(precision);\n\n  return projectionName === \"albersUsa\" ? baseProjection : projectionName === \"orthographic\" ? baseProjection.rotate(rotation).clipAngle(90) : baseProjection.rotate(rotation);\n};\n\nvar _d3GeoProjection = require(\"d3-geo-projection\");\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _projectionConfig = require(\"./projectionConfig\");\n\nvar _projectionConfig2 = _interopRequireDefault(_projectionConfig);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar projectionReference = {\n  mercator: _d3Geo.geoMercator,\n  miller: _d3GeoProjection.geoMiller,\n  times: _d3GeoProjection.geoTimes,\n  robinson: _d3GeoProjection.geoRobinson,\n  winkel3: _d3GeoProjection.geoWinkel3,\n  eckert4: _d3GeoProjection.geoEckert4,\n  albersUsa: _d3Geo.geoAlbersUsa,\n  orthographic: _d3Geo.geoOrthographic\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ZoomableGroup = function (_Component) {\n  _inherits(ZoomableGroup, _Component);\n\n  function ZoomableGroup(props) {\n    _classCallCheck(this, ZoomableGroup);\n\n    var _this = _possibleConstructorReturn(this, (ZoomableGroup.__proto__ || Object.getPrototypeOf(ZoomableGroup)).call(this, props));\n\n    var backdrop = (0, _utils.computeBackdrop)(props.projection, props.backdrop);\n\n    _this.state = {\n      mouseX: (0, _utils.calculateMousePosition)(\"x\", props.projection, props, props.zoom, 1),\n      mouseY: (0, _utils.calculateMousePosition)(\"y\", props.projection, props, props.zoom, 1),\n      mouseXStart: 0,\n      mouseYStart: 0,\n      isPressed: false,\n      resizeFactorX: 1,\n      resizeFactorY: 1,\n      backdrop: {\n        width: Math.round(backdrop.width),\n        height: Math.round(backdrop.height),\n        x: Math.round(backdrop.x),\n        y: Math.round(backdrop.y)\n      }\n    };\n\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleTouchStart = _this.handleTouchStart.bind(_this);\n    _this.handleTouchMove = _this.handleTouchMove.bind(_this);\n    _this.handleResize = _this.handleResize.bind(_this);\n\n    return _this;\n  }\n\n  _createClass(ZoomableGroup, [{\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(_ref) {\n      var pageX = _ref.pageX,\n          pageY = _ref.pageY;\n\n      if (this.props.disablePanning) return;\n      if (!this.state.isPressed) return;\n      this.setState({\n        mouseX: pageX - this.state.mouseXStart,\n        mouseY: pageY - this.state.mouseYStart\n      });\n    }\n  }, {\n    key: \"handleTouchMove\",\n    value: function handleTouchMove(_ref2) {\n      var touches = _ref2.touches;\n\n      this.handleMouseMove(touches[0]);\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp() {\n      if (this.props.disablePanning) return;\n      if (!this.state.isPressed) return;\n      this.setState({\n        isPressed: false\n      });\n      if (!this.props.onMoveEnd) return;\n      var _state = this.state,\n          mouseX = _state.mouseX,\n          mouseY = _state.mouseY,\n          resizeFactorX = _state.resizeFactorX,\n          resizeFactorY = _state.resizeFactorY;\n      var _props = this.props,\n          zoom = _props.zoom,\n          width = _props.width,\n          height = _props.height,\n          projection = _props.projection,\n          onMoveEnd = _props.onMoveEnd;\n\n      var x = width / 2 - mouseX * resizeFactorX / zoom;\n      var y = height / 2 - mouseY * resizeFactorY / zoom;\n      var newCenter = projection.invert([x, y]);\n      onMoveEnd(newCenter);\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(_ref3) {\n      var pageX = _ref3.pageX,\n          pageY = _ref3.pageY;\n\n      if (this.props.disablePanning) return;\n      var _state2 = this.state,\n          mouseX = _state2.mouseX,\n          mouseY = _state2.mouseY,\n          resizeFactorX = _state2.resizeFactorX,\n          resizeFactorY = _state2.resizeFactorY;\n      var _props2 = this.props,\n          zoom = _props2.zoom,\n          width = _props2.width,\n          height = _props2.height,\n          projection = _props2.projection,\n          onMoveStart = _props2.onMoveStart;\n\n      this.setState({\n        isPressed: true,\n        mouseXStart: pageX - mouseX,\n        mouseYStart: pageY - mouseY\n      });\n      if (!onMoveStart) return;\n      var x = width / 2 - mouseX * resizeFactorX / zoom;\n      var y = height / 2 - mouseY * resizeFactorY / zoom;\n      var currentCenter = projection.invert([x, y]);\n      onMoveStart(currentCenter);\n    }\n  }, {\n    key: \"handleTouchStart\",\n    value: function handleTouchStart(_ref4) {\n      var touches = _ref4.touches;\n\n      if (touches.length > 1) {\n        this.handleMouseDown(touches[0]);\n      } else {\n        this.handleMouseUp();\n      }\n    }\n  }, {\n    key: \"preventTouchScroll\",\n    value: function preventTouchScroll(evt) {\n      if (evt.touches.length > 1) {\n        evt.preventDefault();\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _state3 = this.state,\n          mouseX = _state3.mouseX,\n          mouseY = _state3.mouseY,\n          resizeFactorX = _state3.resizeFactorX,\n          resizeFactorY = _state3.resizeFactorY;\n      var _props3 = this.props,\n          projection = _props3.projection,\n          center = _props3.center,\n          zoom = _props3.zoom;\n\n\n      var zoomFactor = nextProps.zoom / zoom;\n      var centerChanged = JSON.stringify(nextProps.center) !== JSON.stringify(center);\n\n      this.setState({\n        zoom: nextProps.zoom,\n        mouseX: centerChanged ? (0, _utils.calculateMousePosition)(\"x\", nextProps.projection, nextProps, nextProps.zoom, resizeFactorX) : mouseX * zoomFactor,\n        mouseY: centerChanged ? (0, _utils.calculateMousePosition)(\"y\", nextProps.projection, nextProps, nextProps.zoom, resizeFactorY) : mouseY * zoomFactor\n      });\n    }\n  }, {\n    key: \"handleResize\",\n    value: function handleResize() {\n      var _props4 = this.props,\n          width = _props4.width,\n          height = _props4.height,\n          projection = _props4.projection,\n          zoom = _props4.zoom;\n\n\n      var resizeFactorX = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().width, width);\n      var resizeFactorY = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().height, height);\n\n      var xPercentageChange = 1 / resizeFactorX * this.state.resizeFactorX;\n      var yPercentageChange = 1 / resizeFactorY * this.state.resizeFactorY;\n\n      this.setState({\n        resizeFactorX: resizeFactorX,\n        resizeFactorY: resizeFactorY,\n        mouseX: this.state.mouseX * xPercentageChange,\n        mouseY: this.state.mouseY * yPercentageChange\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _props5 = this.props,\n          width = _props5.width,\n          height = _props5.height,\n          projection = _props5.projection,\n          zoom = _props5.zoom;\n\n\n      var resizeFactorX = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().width, width);\n      var resizeFactorY = (0, _utils.calculateResizeFactor)(this.zoomableGroupNode.parentNode.getBoundingClientRect().height, height);\n\n      this.setState({\n        resizeFactorX: resizeFactorX,\n        resizeFactorY: resizeFactorY,\n        mouseX: (0, _utils.calculateMousePosition)(\"x\", projection, this.props, zoom, resizeFactorX),\n        mouseY: (0, _utils.calculateMousePosition)(\"y\", projection, this.props, zoom, resizeFactorY)\n      });\n\n      window.addEventListener(\"resize\", this.handleResize);\n      window.addEventListener(\"mouseup\", this.handleMouseUp);\n      this.zoomableGroupNode.addEventListener(\"touchmove\", this.preventTouchScroll);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.handleResize);\n      window.removeEventListener(\"mouseup\", this.handleMouseUp);\n      this.zoomableGroupNode.removeEventListener(\"touchmove\", this.preventTouchScroll);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _props6 = this.props,\n          width = _props6.width,\n          height = _props6.height,\n          zoom = _props6.zoom,\n          style = _props6.style,\n          projection = _props6.projection,\n          children = _props6.children;\n      var _state4 = this.state,\n          mouseX = _state4.mouseX,\n          mouseY = _state4.mouseY,\n          resizeFactorX = _state4.resizeFactorX,\n          resizeFactorY = _state4.resizeFactorY;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-zoomable-group\",\n          ref: function ref(zoomableGroupNode) {\n            return _this2.zoomableGroupNode = zoomableGroupNode;\n          },\n          transform: \"\\n           translate(\\n             \" + Math.round((width / 2 + resizeFactorX * mouseX) * 100) / 100 + \"\\n             \" + Math.round((height / 2 + resizeFactorY * mouseY) * 100) / 100 + \"\\n           )\\n           scale(\" + zoom + \")\\n           translate(\" + -width / 2 + \" \" + -height / 2 + \")\\n         \",\n          onMouseMove: this.handleMouseMove,\n          onMouseUp: this.handleMouseUp,\n          onMouseDown: this.handleMouseDown,\n          onTouchStart: this.handleTouchStart,\n          onTouchMove: this.handleTouchMove,\n          onTouchEnd: this.handleMouseUp,\n          style: style\n        },\n        _react2.default.createElement(\"rect\", {\n          x: this.state.backdrop.x,\n          y: this.state.backdrop.y,\n          width: this.state.backdrop.width,\n          height: this.state.backdrop.height,\n          fill: \"transparent\",\n          style: { strokeWidth: 0 }\n        }),\n        (0, _utils.createNewChildren)(children, this.props)\n      );\n    }\n  }]);\n\n  return ZoomableGroup;\n}(_react.Component);\n\nZoomableGroup.defaultProps = {\n  center: [0, 0],\n  backdrop: {\n    x: [-179.9, 179.9],\n    y: [89.9, -89.9]\n  },\n  zoom: 1,\n  disablePanning: false\n};\n\nexports.default = ZoomableGroup;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ZoomableGlobe = function (_Component) {\n  _inherits(ZoomableGlobe, _Component);\n\n  function ZoomableGlobe(props) {\n    _classCallCheck(this, ZoomableGlobe);\n\n    var _this = _possibleConstructorReturn(this, (ZoomableGlobe.__proto__ || Object.getPrototypeOf(ZoomableGlobe)).call(this, props));\n\n    var initialRotation = props.projection.rotate();\n\n    _this.state = {\n      mouseX: 0,\n      mouseY: 0,\n      mouseXStart: 0,\n      mouseYStart: 0,\n      isPressed: false,\n      rotation: [initialRotation[0] - props.center[0], initialRotation[1] - props.center[1], initialRotation[2]]\n    };\n\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleTouchStart = _this.handleTouchStart.bind(_this);\n    _this.handleTouchMove = _this.handleTouchMove.bind(_this);\n    return _this;\n  }\n\n  _createClass(ZoomableGlobe, [{\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(_ref) {\n      var pageX = _ref.pageX,\n          pageY = _ref.pageY,\n          clientX = _ref.clientX,\n          clientY = _ref.clientY;\n\n      if (this.props.disablePanning) return;\n      if (!this.state.isPressed) return;\n\n      var differenceX = clientX - this.state.mouseXStart;\n      var differenceY = clientY - this.state.mouseYStart;\n\n      this.setState({\n        mouseX: clientX,\n        mouseY: clientY,\n        mouseXStart: clientX,\n        mouseYStart: clientY,\n        rotation: [this.state.rotation[0] + differenceX * this.props.sensitivity, this.state.rotation[1] - differenceY * this.props.sensitivity, this.state.rotation[2]]\n      });\n    }\n  }, {\n    key: \"handleTouchMove\",\n    value: function handleTouchMove(_ref2) {\n      var touches = _ref2.touches;\n\n      this.handleMouseMove(touches[0]);\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp() {\n      if (this.props.disablePanning) return;\n      if (!this.state.isPressed) return;\n      this.setState({\n        isPressed: false\n      });\n      if (!this.props.onMoveEnd) return;\n      var newCenter = this.props.projection.invert([this.props.width / 2, this.props.height / 2]);\n      this.props.onMoveEnd(newCenter);\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(_ref3) {\n      var pageX = _ref3.pageX,\n          pageY = _ref3.pageY,\n          clientX = _ref3.clientX,\n          clientY = _ref3.clientY;\n\n      if (this.props.disablePanning) return;\n      this.setState({\n        isPressed: true,\n        mouseXStart: clientX,\n        mouseYStart: clientY\n      });\n      if (!this.props.onMoveStart) return;\n      var currentCenter = this.props.projection.invert([this.props.width / 2, this.props.height / 2]);\n      this.props.onMoveStart(currentCenter);\n    }\n  }, {\n    key: \"handleTouchStart\",\n    value: function handleTouchStart(_ref4) {\n      var touches = _ref4.touches;\n\n      if (touches.length > 1) {\n        this.handleMouseDown(touches[0]);\n      } else {\n        this.handleMouseUp();\n      }\n    }\n  }, {\n    key: \"preventTouchScroll\",\n    value: function preventTouchScroll(evt) {\n      if (evt.touches.length > 1) {\n        evt.preventDefault();\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _state = this.state,\n          mouseX = _state.mouseX,\n          mouseY = _state.mouseY;\n      var _props = this.props,\n          projection = _props.projection,\n          center = _props.center,\n          zoom = _props.zoom;\n\n\n      var zoomFactor = nextProps.zoom / zoom;\n      var centerChanged = JSON.stringify(nextProps.center) !== JSON.stringify(center);\n\n      this.setState({\n        zoom: nextProps.zoom,\n        rotation: centerChanged ? [-nextProps.center[0], -nextProps.center[1], this.state.rotation[2]] : this.state.rotation\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _props2 = this.props,\n          width = _props2.width,\n          height = _props2.height,\n          projection = _props2.projection,\n          zoom = _props2.zoom;\n\n\n      window.addEventListener(\"resize\", this.handleResize);\n      window.addEventListener(\"mouseup\", this.handleMouseUp);\n      this.zoomableGlobeNode.addEventListener(\"touchmove\", this.preventTouchScroll);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.handleResize);\n      window.removeEventListener(\"mouseup\", this.handleMouseUp);\n      this.zoomableGlobeNode.removeEventListener(\"touchmove\", this.preventTouchScroll);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _props3 = this.props,\n          width = _props3.width,\n          height = _props3.height,\n          zoom = _props3.zoom,\n          style = _props3.style,\n          projection = _props3.projection,\n          children = _props3.children;\n      var _state2 = this.state,\n          mouseX = _state2.mouseX,\n          mouseY = _state2.mouseY;\n\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-zoomable-globe\",\n          ref: function ref(zoomableGlobeNode) {\n            return _this2.zoomableGlobeNode = zoomableGlobeNode;\n          },\n          transform: \"\\n           translate(\" + width / 2 + \" \" + height / 2 + \")\\n           scale(\" + zoom + \")\\n           translate(\" + -width / 2 + \" \" + -height / 2 + \")\\n         \",\n          onMouseMove: this.handleMouseMove,\n          onMouseUp: this.handleMouseUp,\n          onMouseDown: this.handleMouseDown,\n          onTouchStart: this.handleTouchStart,\n          onTouchMove: this.handleTouchMove,\n          onTouchEnd: this.handleMouseUp,\n          style: style\n        },\n        (0, _utils.createNewChildren)(children, {\n          width: width,\n          height: height,\n          center: this.center,\n          backdrop: this.backdrop,\n          zoom: this.props.zoom,\n          disablePanning: this.props.disablePanning,\n          children: children,\n          projection: projection.rotate(this.state.rotation)\n        })\n      );\n    }\n  }]);\n\n  return ZoomableGlobe;\n}(_react.Component);\n\nZoomableGlobe.defaultProps = {\n  center: [0, 0],\n  zoom: 1,\n  disablePanning: false,\n  sensitivity: 0.25\n};\n\nexports.default = ZoomableGlobe;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _topojsonClient = require(\"topojson-client\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Geographies = function (_Component) {\n  _inherits(Geographies, _Component);\n\n  function Geographies(props) {\n    _classCallCheck(this, Geographies);\n\n    var _this = _possibleConstructorReturn(this, (Geographies.__proto__ || Object.getPrototypeOf(Geographies)).call(this, props));\n\n    _this.state = {\n      geographyPaths: _this.shouldFetchGeographies(props.geography) ? [] : _this.parseGeographies(props.geography)\n    };\n    return _this;\n  }\n\n  _createClass(Geographies, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.geography !== this.props.geography) {\n        if (this.shouldFetchGeographies(nextProps.geography)) {\n          this.fetchGeographies(nextProps.geography);\n        } else {\n          this.setState({\n            geographyPaths: this.parseGeographies(nextProps.geography)\n          });\n        }\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var geoPathsChanged = nextState.geographyPaths.length !== this.state.geographyPaths.length;\n      return geoPathsChanged || nextProps.disableOptimization;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.geographyUrl || this.props.geographyPaths) {\n        console.warn(\"You are using the deprecated geographyUrl or geographyPaths props. Use the new geography prop instead. Check out the new docs here: https://github.com/zcreativelabs/react-simple-maps#Geographies-component\");\n      }\n      if (this.shouldFetchGeographies(this.props.geography)) {\n        this.fetchGeographies(this.props.geography);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.cancelPendingRequest();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          projection = _props.projection,\n          style = _props.style,\n          children = _props.children;\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-geographies\", style: style },\n        children(this.state.geographyPaths || [], projection)\n      );\n    }\n  }, {\n    key: \"shouldFetchGeographies\",\n    value: function shouldFetchGeographies(geography) {\n      return typeof geography === 'string';\n    }\n  }, {\n    key: \"parseGeographies\",\n    value: function parseGeographies(geography) {\n      if (Array.isArray(geography)) {\n        return geography;\n      }\n\n      if (Object.prototype.toString.call(geography) === '[object Object]') {\n        return (0, _topojsonClient.feature)(geography, geography.objects[Object.keys(geography.objects)[0]]).features;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"fetchGeographies\",\n    value: function fetchGeographies(geography) {\n      var _this2 = this;\n\n      var request = new XMLHttpRequest();\n      request.open(\"GET\", geography, true);\n      request.onload = function () {\n        if (request.status >= 200 && request.status < 400) {\n          var geographyPaths = JSON.parse(request.responseText);\n          _this2.setState({\n            geographyPaths: _this2.parseGeographies(geographyPaths)\n          }, function () {\n            if (_this2.props.onGeographyPathsLoaded) {\n              _this2.props.onGeographyPathsLoaded(String(request.status));\n            }\n          });\n        } else {\n          if (_this2.props.onGeographyPathsLoaded) {\n            _this2.props.onGeographyPathsLoaded(String(request.status));\n          }\n        }\n      };\n      request.onerror = function () {\n        console.log(\"There was a connection error...\");\n      };\n      request.send();\n\n      this.cancelPendingRequest();\n      this._xhr = request;\n    }\n  }, {\n    key: \"cancelPendingRequest\",\n    value: function cancelPendingRequest() {\n      if (this._xhr) {\n        this._xhr.abort();\n        this._xhr = null;\n      }\n    }\n  }]);\n\n  return Geographies;\n}(_react.Component);\n\nGeographies.defaultProps = {\n  componentIdentifier: \"Geographies\",\n  disableOptimization: false,\n  geography: \"\"\n};\n\nexports.default = Geographies;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar pathCache = {};\n\nvar renderPath = function renderPath(cacheId, geography, projection, round, precision) {\n  if (pathCache[cacheId]) return pathCache[cacheId];\n\n  var pathString = cacheId ? pathCache[cacheId] ? pathCache[cacheId] : round ? (0, _utils.roundPath)((0, _d3Geo.geoPath)().projection(projection)(geography), precision) : (0, _d3Geo.geoPath)().projection(projection)(geography) : round ? (0, _utils.roundPath)((0, _d3Geo.geoPath)().projection(projection)(geography), precision) : (0, _d3Geo.geoPath)().projection(projection)(geography);\n\n  if (cacheId) pathCache[cacheId] = pathString;\n\n  return pathString;\n};\n\nvar Geography = function (_Component) {\n  _inherits(Geography, _Component);\n\n  function Geography() {\n    _classCallCheck(this, Geography);\n\n    var _this = _possibleConstructorReturn(this, (Geography.__proto__ || Object.getPrototypeOf(Geography)).call(this));\n\n    _this.state = {\n      hover: false,\n      pressed: false\n    };\n\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseClick = _this.handleMouseClick.bind(_this);\n    _this.handleFocus = _this.handleFocus.bind(_this);\n    _this.handleBlur = _this.handleBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(Geography, [{\n    key: \"handleMouseClick\",\n    value: function handleMouseClick(evt) {\n      evt.persist();\n      var _props = this.props,\n          onClick = _props.onClick,\n          geography = _props.geography;\n\n      return onClick && onClick(geography, evt);\n    }\n  }, {\n    key: \"handleMouseEnter\",\n    value: function handleMouseEnter(evt) {\n      evt.persist();\n      var _props2 = this.props,\n          onMouseEnter = _props2.onMouseEnter,\n          geography = _props2.geography;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onMouseEnter && onMouseEnter(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(evt) {\n      evt.persist();\n      if (this.state.pressed) return;\n      var _props3 = this.props,\n          onMouseMove = _props3.onMouseMove,\n          geography = _props3.geography;\n\n      if (!this.state.hover) {\n        this.setState({\n          hover: true\n        }, function () {\n          return onMouseMove && onMouseMove(geography, evt);\n        });\n      } else if (onMouseMove) onMouseMove(geography, evt);else return;\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave(evt) {\n      evt.persist();\n      var _props4 = this.props,\n          onMouseLeave = _props4.onMouseLeave,\n          geography = _props4.geography;\n\n      this.setState({\n        hover: false,\n        pressed: false\n      }, function () {\n        return onMouseLeave && onMouseLeave(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(evt) {\n      evt.persist();\n      var _props5 = this.props,\n          onMouseDown = _props5.onMouseDown,\n          geography = _props5.geography;\n\n      this.setState({\n        pressed: true\n      }, function () {\n        return onMouseDown && onMouseDown(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp(evt) {\n      evt.persist();\n      var _props6 = this.props,\n          onMouseUp = _props6.onMouseUp,\n          geography = _props6.geography;\n\n      this.setState({\n        pressed: false\n      }, function () {\n        return onMouseUp && onMouseUp(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(evt) {\n      evt.persist();\n      var _props7 = this.props,\n          onFocus = _props7.onFocus,\n          geography = _props7.geography;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onFocus && onFocus(geography, evt);\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(evt) {\n      evt.persist();\n      var _props8 = this.props,\n          onBlur = _props8.onBlur,\n          geography = _props8.geography;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onBlur && onBlur(geography, evt);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _props9 = this.props,\n          geography = _props9.geography,\n          projection = _props9.projection,\n          round = _props9.round,\n          cacheId = _props9.cacheId,\n          precision = _props9.precision,\n          tabable = _props9.tabable,\n          style = _props9.style;\n      var _state = this.state,\n          hover = _state.hover,\n          pressed = _state.pressed;\n\n\n      var pathString = renderPath(cacheId, geography, projection, round, precision);\n\n      var excludeProps = [\"geography\", \"projection\", \"round\", \"cacheId\", \"precision\", \"tabable\", \"style\", \"onClick\", \"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\", \"onMouseDown\", \"onMouseUp\", \"onFocus\", \"onBlur\"];\n\n      var restProps = Object.keys(this.props).filter(function (key) {\n        return excludeProps.indexOf(key) === -1;\n      }).reduce(function (obj, key) {\n        obj[key] = _this2.props[key];\n        return obj;\n      }, {});\n\n      return _react2.default.createElement(\"path\", _extends({\n        d: pathString,\n        className: \"rsm-geography\" + (pressed ? \" rsm-geography--pressed\" : \"\") + (hover ? \" rsm-geography--hover\" : \"\"),\n        style: style[pressed || hover ? pressed ? \"pressed\" : \"hover\" : \"default\"],\n        onClick: this.handleMouseClick,\n        onMouseEnter: this.handleMouseEnter,\n        onMouseMove: this.handleMouseMove,\n        onMouseLeave: this.handleMouseLeave,\n        onMouseDown: this.handleMouseDown,\n        onMouseUp: this.handleMouseUp,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        tabIndex: tabable ? 0 : -1\n      }, restProps));\n    }\n  }]);\n\n  return Geography;\n}(_react.Component);\n\nGeography.defaultProps = {\n  precision: 0.1,\n  cacheId: null,\n  round: false,\n  tabable: true,\n  style: {\n    default: {},\n    hover: {},\n    pressed: {}\n  }\n};\n\nexports.default = Geography;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Marker = function (_Component) {\n  _inherits(Marker, _Component);\n\n  function Marker() {\n    _classCallCheck(this, Marker);\n\n    var _this = _possibleConstructorReturn(this, (Marker.__proto__ || Object.getPrototypeOf(Marker)).call(this));\n\n    _this.state = {\n      hover: false,\n      pressed: false\n    };\n\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseClick = _this.handleMouseClick.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleFocus = _this.handleFocus.bind(_this);\n    _this.handleBlur = _this.handleBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(Marker, [{\n    key: \"handleMouseEnter\",\n    value: function handleMouseEnter(evt) {\n      evt.persist();\n      var _props = this.props,\n          onMouseEnter = _props.onMouseEnter,\n          marker = _props.marker;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onMouseEnter && onMouseEnter(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(evt) {\n      evt.persist();\n      if (this.state.pressed) return;\n      var _props2 = this.props,\n          onMouseMove = _props2.onMouseMove,\n          marker = _props2.marker;\n\n      if (!this.state.hover) {\n        this.setState({\n          hover: true\n        }, function () {\n          return onMouseMove && onMouseMove(marker, evt);\n        });\n      } else if (onMouseMove) onMouseMove(marker, evt);else return;\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave(evt) {\n      evt.persist();\n      var _props3 = this.props,\n          onMouseLeave = _props3.onMouseLeave,\n          marker = _props3.marker;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onMouseLeave && onMouseLeave(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(evt) {\n      evt.persist();\n      var _props4 = this.props,\n          onMouseDown = _props4.onMouseDown,\n          marker = _props4.marker;\n\n      this.setState({\n        pressed: true\n      }, function () {\n        return onMouseDown && onMouseDown(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp(evt) {\n      evt.persist();\n      var _props5 = this.props,\n          onMouseUp = _props5.onMouseUp,\n          marker = _props5.marker;\n\n      this.setState({\n        pressed: false\n      }, function () {\n        return onMouseUp && onMouseUp(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseClick\",\n    value: function handleMouseClick(evt) {\n      if (!this.props.onClick) return;\n      evt.persist();\n      var _props6 = this.props,\n          onClick = _props6.onClick,\n          marker = _props6.marker,\n          projection = _props6.projection;\n\n      return onClick && onClick(marker, projection(marker.coordinates), evt);\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(evt) {\n      evt.persist();\n      var _props7 = this.props,\n          onFocus = _props7.onFocus,\n          marker = _props7.marker;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onFocus && onFocus(marker, evt);\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(evt) {\n      evt.persist();\n      var _props8 = this.props,\n          onBlur = _props8.onBlur,\n          marker = _props8.marker;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onBlur && onBlur(marker, evt);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props9 = this.props,\n          projection = _props9.projection,\n          marker = _props9.marker,\n          style = _props9.style,\n          tabable = _props9.tabable,\n          zoom = _props9.zoom,\n          children = _props9.children,\n          preserveMarkerAspect = _props9.preserveMarkerAspect,\n          width = _props9.width,\n          height = _props9.height;\n      var _state = this.state,\n          pressed = _state.pressed,\n          hover = _state.hover;\n\n\n      var scale = preserveMarkerAspect ? \" scale(\" + 1 / zoom + \")\" : \"\";\n      var translation = projection(marker.coordinates);\n\n      var lineString = {\n        \"type\": \"Feature\",\n        \"geometry\": {\n          \"type\": \"LineString\",\n          \"coordinates\": [projection.invert([width / 2, height / 2]), marker.coordinates]\n        }\n      };\n\n      var radians = Math.PI / 2,\n          degrees = 90;\n      var isGlobe = projection.clipAngle && projection.clipAngle() === degrees;\n      var isHidden = isGlobe && (0, _d3Geo.geoLength)(lineString) > radians;\n\n      return _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-marker\" + (pressed ? \" rsm-marker--pressed\" : \"\") + (hover ? \" rsm-marker--hover\" : \"\"),\n          transform: \"translate(\\n           \" + translation[0] + \"\\n           \" + translation[1] + \"\\n         ) \" + scale,\n          style: style[isHidden ? \"hidden\" : pressed || hover ? pressed ? \"pressed\" : \"hover\" : \"default\"],\n          onMouseEnter: this.handleMouseEnter,\n          onMouseLeave: this.handleMouseLeave,\n          onMouseDown: this.handleMouseDown,\n          onMouseUp: this.handleMouseUp,\n          onClick: this.handleMouseClick,\n          onMouseMove: this.handleMouseMove,\n          onFocus: this.handleFocus,\n          onBlur: this.handleBlur,\n          tabIndex: tabable ? 0 : -1\n        },\n        children\n      );\n    }\n  }]);\n\n  return Marker;\n}(_react.Component);\n\nMarker.defaultProps = {\n  style: {\n    default: {},\n    hover: {},\n    pressed: {}\n  },\n  marker: {\n    coordinates: [0, 0]\n  },\n  tabable: true,\n  preserveMarkerAspect: true\n};\n\nexports.default = Marker;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _MapGroup = require(\"./MapGroup\");\n\nvar _MapGroup2 = _interopRequireDefault(_MapGroup);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar Markers = function Markers(_ref) {\n  var groupName = _ref.groupName,\n      itemName = _ref.itemName,\n      componentIdentifier = _ref.componentIdentifier,\n      restProps = _objectWithoutProperties(_ref, [\"groupName\", \"itemName\", \"componentIdentifier\"]);\n\n  return _react2.default.createElement(_MapGroup2.default, _extends({\n    groupName: groupName,\n    itemName: itemName\n  }, restProps));\n};\n\nMarkers.defaultProps = {\n  componentIdentifier: \"Markers\",\n  groupName: \"markers\",\n  itemName: \"marker\"\n};\n\nexports.default = Markers;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Line = function (_Component) {\n  _inherits(Line, _Component);\n\n  function Line(props) {\n    _classCallCheck(this, Line);\n\n    var _this = _possibleConstructorReturn(this, (Line.__proto__ || Object.getPrototypeOf(Line)).call(this, props));\n\n    _this.state = {\n      hover: false,\n      pressed: false\n    };\n\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.handleMouseClick = _this.handleMouseClick.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleFocus = _this.handleFocus.bind(_this);\n    _this.handleBlur = _this.handleBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(Line, [{\n    key: \"handleMouseEnter\",\n    value: function handleMouseEnter(evt) {\n      evt.persist();\n      var _props = this.props,\n          onMouseEnter = _props.onMouseEnter,\n          line = _props.line;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onMouseEnter && onMouseEnter(line, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(evt) {\n      evt.persist();\n      if (this.state.pressed) return;\n      var _props2 = this.props,\n          onMouseMove = _props2.onMouseMove,\n          line = _props2.line;\n\n      if (!this.state.hover) {\n        this.setState({\n          hover: true\n        }, function () {\n          return onMouseMove && onMouseMove(line, evt);\n        });\n      } else if (onMouseMove) onMouseMove(line, evt);else return;\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave(evt) {\n      evt.persist();\n      var _props3 = this.props,\n          onMouseLeave = _props3.onMouseLeave,\n          line = _props3.line;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onMouseLeave && onMouseLeave(line, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(evt) {\n      evt.persist();\n      var _props4 = this.props,\n          onMouseDown = _props4.onMouseDown,\n          line = _props4.line;\n\n      this.setState({\n        pressed: true\n      }, function () {\n        return onMouseDown && onMouseDown(line, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp(evt) {\n      evt.persist();\n      var _props5 = this.props,\n          onMouseUp = _props5.onMouseUp,\n          line = _props5.line;\n\n      this.setState({\n        pressed: false\n      }, function () {\n        return onMouseUp && onMouseUp(line, evt);\n      });\n    }\n  }, {\n    key: \"handleMouseClick\",\n    value: function handleMouseClick(evt) {\n      if (!this.props.onClick) return;\n      evt.persist();\n      var _props6 = this.props,\n          onClick = _props6.onClick,\n          line = _props6.line,\n          projection = _props6.projection;\n\n      return onClick && onClick(line, [projection(line.coordinates.start), projection(line.coordinates.end)], evt);\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(evt) {\n      evt.persist();\n      var _props7 = this.props,\n          onFocus = _props7.onFocus,\n          line = _props7.line;\n\n      this.setState({\n        hover: true\n      }, function () {\n        return onFocus && onFocus(line, evt);\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(evt) {\n      evt.persist();\n      var _props8 = this.props,\n          onBlur = _props8.onBlur,\n          line = _props8.line;\n\n      this.setState({\n        hover: false\n      }, function () {\n        return onBlur && onBlur(line, evt);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props9 = this.props,\n          className = _props9.className,\n          projection = _props9.projection,\n          line = _props9.line,\n          style = _props9.style,\n          tabable = _props9.tabable,\n          zoom = _props9.zoom,\n          preserveMarkerAspect = _props9.preserveMarkerAspect,\n          width = _props9.width,\n          height = _props9.height,\n          buildPath = _props9.buildPath,\n          strokeWidth = _props9.strokeWidth;\n      var _state = this.state,\n          pressed = _state.pressed,\n          hover = _state.hover;\n\n\n      var scale = preserveMarkerAspect ? \" scale(\" + 1 / zoom + \")\" : \"\";\n\n      var buildLineString = function buildLineString(coordinates) {\n        return {\n          type: \"Feature\",\n          geometry: {\n            type: \"LineString\",\n            coordinates: [projection.invert([width / 2, height / 2]), coordinates]\n          }\n        };\n      };\n      var startLineString = buildLineString(line.coordinates.start);\n      var endLineString = buildLineString(line.coordinates.end);\n\n      var radians = Math.PI / 2,\n          degrees = 90;\n      var isGlobe = projection.clipAngle && projection.clipAngle() === degrees;\n      var isHidden = isGlobe && ((0, _d3Geo.geoLength)(startLineString) > radians || (0, _d3Geo.geoLength)(endLineString) > radians);\n\n      var start = projection(line.coordinates.start);\n      var end = projection(line.coordinates.end);\n\n      var path = buildPath ? buildPath(start, end, line) : \"M \" + start.join(\" \") + \" L \" + end.join(\" \");\n\n      return _react2.default.createElement(\"path\", {\n        className: \"rsm-line\" + (pressed ? \" rsm-line--pressed\" : \"\") + (hover ? \" rsm-line--hover\" : \"\") + \" \" + className,\n        transform: \"\" + scale,\n        style: style[isHidden ? \"hidden\" : pressed || hover ? pressed ? \"pressed\" : \"hover\" : \"default\"],\n        onMouseEnter: this.handleMouseEnter,\n        onMouseLeave: this.handleMouseLeave,\n        onMouseDown: this.handleMouseDown,\n        onMouseUp: this.handleMouseUp,\n        onClick: this.handleMouseClick,\n        onMouseMove: this.handleMouseMove,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        tabIndex: tabable ? 0 : -1,\n        d: path,\n        strokeWidth: strokeWidth\n      });\n    }\n  }]);\n\n  return Line;\n}(_react.Component);\n\nLine.defaultProps = {\n  style: {\n    default: {},\n    hover: {},\n    pressed: {}\n  },\n  line: {\n    coordinates: {\n      start: [0, 0],\n      end: [-99.1, 19.4]\n    }\n  },\n  tabable: true,\n  preserveMarkerAspect: true,\n  strokeWidth: 1,\n  className: \"\"\n};\n\nexports.default = Line;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _MapGroup = require(\"./MapGroup\");\n\nvar _MapGroup2 = _interopRequireDefault(_MapGroup);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar Lines = function Lines(_ref) {\n  var groupName = _ref.groupName,\n      itemName = _ref.itemName,\n      componentIdentifier = _ref.componentIdentifier,\n      restProps = _objectWithoutProperties(_ref, [\"groupName\", \"itemName\", \"componentIdentifier\"]);\n\n  return _react2.default.createElement(_MapGroup2.default, _extends({\n    groupName: groupName,\n    itemName: itemName\n  }, restProps));\n};\n\nLines.defaultProps = {\n  componentIdentifier: \"Lines\",\n  groupName: \"lines\",\n  itemName: \"line\"\n};\n\nexports.default = Lines;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Annotation = function (_Component) {\n  _inherits(Annotation, _Component);\n\n  function Annotation() {\n    _classCallCheck(this, Annotation);\n\n    return _possibleConstructorReturn(this, (Annotation.__proto__ || Object.getPrototypeOf(Annotation)).apply(this, arguments));\n  }\n\n  _createClass(Annotation, [{\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          projection = _props.projection,\n          subject = _props.subject,\n          style = _props.style,\n          hiddenStyle = _props.hiddenStyle,\n          dx = _props.dx,\n          dy = _props.dy,\n          zoom = _props.zoom,\n          stroke = _props.stroke,\n          strokeWidth = _props.strokeWidth,\n          children = _props.children,\n          curve = _props.curve,\n          markerEnd = _props.markerEnd,\n          width = _props.width,\n          height = _props.height;\n\n\n      var connectorPath = (0, _utils.createConnectorPath)(null, [-dx / zoom, -dy / zoom], curve);\n      var translation = projection(subject);\n\n      var lineString = {\n        \"type\": \"Feature\",\n        \"geometry\": {\n          \"type\": \"LineString\",\n          \"coordinates\": [projection.invert([width / 2, height / 2]), subject]\n        }\n      };\n\n      var radians = Math.PI / 2,\n          degrees = 90;\n      var isGlobe = projection.clipAngle && projection.clipAngle() === degrees;\n      var isHidden = isGlobe && (0, _d3Geo.geoLength)(lineString) > radians;\n\n      return _react2.default.createElement(\n        \"g\",\n        {\n          className: \"rsm-annotation\",\n          style: isHidden ? _extends({}, style, hiddenStyle) : style,\n          transform: \"translate(\\n          \" + (translation[0] + dx / zoom) + \"\\n          \" + (translation[1] + dy / zoom) + \"\\n        )\",\n          textAnchor: (0, _utils.createTextAnchor)(dx)\n        },\n        children,\n        _react2.default.createElement(\"path\", {\n          d: connectorPath,\n          stroke: stroke,\n          strokeWidth: strokeWidth,\n          fill: \"none\",\n          markerEnd: markerEnd\n        })\n      );\n    }\n  }]);\n\n  return Annotation;\n}(_react.Component);\n\nAnnotation.defaultProps = {\n  curve: 0,\n  markerEnd: \"none\",\n  componentIdentifier: \"Annotation\",\n  stroke: \"#000000\",\n  strokeWidth: 1,\n  zoom: 1\n};\n\nexports.default = Annotation;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _MapGroup = require(\"./MapGroup\");\n\nvar _MapGroup2 = _interopRequireDefault(_MapGroup);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar Annotations = function Annotations(_ref) {\n  var groupName = _ref.groupName,\n      itemName = _ref.itemName,\n      componentIdentifier = _ref.componentIdentifier,\n      restProps = _objectWithoutProperties(_ref, [\"groupName\", \"itemName\", \"componentIdentifier\"]);\n\n  return _react2.default.createElement(_MapGroup2.default, _extends({\n    groupName: groupName,\n    itemName: itemName\n  }, restProps));\n};\n\nAnnotations.defaultProps = {\n  componentIdentifier: \"Annotations\",\n  groupName: \"annotations\",\n  itemName: \"annotation\"\n};\n\nexports.default = Annotations;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _d3Geo = require(\"d3-geo\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar computeGraticule = function computeGraticule(projection, step) {\n  return (0, _d3Geo.geoPath)().projection(projection)((0, _d3Geo.geoGraticule)().step(step)());\n};\n\nvar computeOutline = function computeOutline(projection) {\n  return (0, _d3Geo.geoPath)().projection(projection)((0, _d3Geo.geoGraticule)().outline());\n};\n\nvar Graticule = function (_Component) {\n  _inherits(Graticule, _Component);\n\n  function Graticule() {\n    _classCallCheck(this, Graticule);\n\n    var _this = _possibleConstructorReturn(this, (Graticule.__proto__ || Object.getPrototypeOf(Graticule)).call(this));\n\n    _this.state = {\n      renderGraticule: false,\n      graticulePath: \"\",\n      outlinePath: \"\"\n    };\n    _this.renderGraticule = _this.renderGraticule.bind(_this);\n    return _this;\n  }\n\n  _createClass(Graticule, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.renderGraticule();\n    }\n  }, {\n    key: \"renderGraticule\",\n    value: function renderGraticule() {\n      var _props = this.props,\n          step = _props.step,\n          projection = _props.projection,\n          round = _props.round,\n          precision = _props.precision;\n\n\n      this.setState({\n        renderGraticule: true,\n        graticulePath: round ? (0, _utils.roundPath)(computeGraticule(projection, step), precision) : computeGraticule(projection, step),\n        outlinePath: round ? (0, _utils.roundPath)(computeOutline(projection), precision) : computeOutline(projection)\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _props2 = this.props,\n          step = _props2.step,\n          projection = _props2.projection,\n          round = _props2.round,\n          precision = _props2.precision,\n          globe = _props2.globe;\n\n\n      if (nextProps.round !== round || nextProps.precision !== precision || globe) {\n        this.setState({\n          graticulePath: nextProps.round ? (0, _utils.roundPath)(computeGraticule(projection, step), precision) : computeGraticule(projection, step),\n          outlinePath: nextProps.round ? (0, _utils.roundPath)(computeOutline(projection), precision) : computeOutline(projection)\n        });\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      return nextProps.disableOptimization;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props3 = this.props,\n          zoom = _props3.zoom,\n          style = _props3.style,\n          outline = _props3.outline,\n          fill = _props3.fill,\n          stroke = _props3.stroke;\n\n\n      return this.state.renderGraticule && _react2.default.createElement(\n        \"g\",\n        { className: \"rsm-graticule\" },\n        _react2.default.createElement(\"path\", {\n          fill: fill,\n          stroke: stroke,\n          d: this.state.graticulePath,\n          style: style\n        }),\n        outline && _react2.default.createElement(\"path\", {\n          fill: fill,\n          stroke: stroke,\n          d: this.state.outlinePath,\n          style: style\n        })\n      );\n    }\n  }]);\n\n  return Graticule;\n}(_react.Component);\n\nGraticule.defaultProps = {\n  componentIdentifier: \"Graticule\",\n  disableOptimization: true,\n  globe: false,\n  round: true,\n  precision: 0.1,\n  step: [10, 10],\n  outline: true,\n  stroke: \"#DDDDDD\",\n  fill: \"transparent\",\n  style: {\n    pointerEvents: \"none\"\n  }\n};\n\nexports.default = Graticule;","// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nexport default function() {\n  return new Adder;\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","export default function noop() {}\n","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n","import adder from \"./adder\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nexport var areaRingSum = adder();\n\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n","import {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n","import adder from \"./adder\";\nimport {areaStream, areaRingSum} from \"./area\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport {abs, degrees, epsilon, radians} from \"./math\";\nimport stream from \"./stream\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum = adder(),\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n","import {asin, atan2, cos, degrees, epsilon, epsilon2, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 =\n  X2 = Y2 = Z2 = 0;\n  stream(object, centroidStream);\n\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z;\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z;\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n","import compose from \"./compose\";\nimport {asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport constant from \"./constant\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math\";\nimport {rotateRadians} from \"./rotation\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n","import noop from \"../noop\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n","import {abs, epsilon} from \"./math\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n","import pointEqual from \"../pointEqual\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n","import adder from \"./adder\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian\";\nimport {asin, atan2, cos, epsilon, halfPi, pi, quarterPi, sin, tau} from \"./math\";\n\nvar sum = adder();\n\nexport default function(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n","import clipBuffer from \"./buffer\";\nimport clipRejoin from \"./rejoin\";\nimport {epsilon, halfPi} from \"../math\";\nimport polygonContains from \"../polygonContains\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n","import clip from \"./index\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n","import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian\";\nimport {circleStream} from \"../circle\";\nimport {abs, cos, epsilon, pi, radians, sqrt} from \"../math\";\nimport pointEqual from \"../pointEqual\";\nimport clip from \"./index\";\n\nexport default function(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon;\n            point1[1] += epsilon;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n","export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n","import {abs, epsilon} from \"../math\";\nimport clipBuffer from \"./buffer\";\nimport clipLine from \"./line\";\nimport clipRejoin from \"./rejoin\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport default function clipRectangle(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n","import adder from \"./adder\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar lengthSum = adder(),\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum.reset();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n","import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n","export default function(x) {\n  return x;\n}\n","import adder from \"../adder\";\nimport {abs} from \"../math\";\nimport noop from \"../noop\";\n\nvar areaSum = adder(),\n    areaRingSum = adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum.reset();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n","import noop from \"../noop\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n","export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        if (this._circle == null) this._circle = circle(this._radius);\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n","export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n","import {default as geoStream} from \"../stream\";\nimport boundsStream from \"../path/bounds\";\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream));\n  fitBounds(boundsStream.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nexport function fitExtent(projection, extent, object) {\n  return fit(projection, function(b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nexport function fitWidth(projection, width, object) {\n  return fit(projection, function(b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitHeight(projection, height, object) {\n  return fit(projection, function(b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n","import adder from \"../adder\";\nimport {sqrt} from \"../math\";\nimport noop from \"../noop\";\n\nvar lengthSum = adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n","import {cartesian} from \"../cartesian\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math\";\nimport {transformer} from \"../transform\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n","import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport clipRectangle from \"../clip/rectangle\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport {cos, degrees, radians, sin, sqrt} from \"../math\";\nimport {rotateRadians} from \"../rotation\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit\";\nimport resample from \"./resample\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy) {\n  function transform(x, y) {\n    return [dx + k * x, dy - k * y];\n  }\n  transform.invert = function(x, y) {\n    return [(x - dx) / k, (dy - y) / k];\n  };\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, alpha) {\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform(x, y) {\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform.invert = function(x, y) {\n    return [ai * x - bi * y + ci, fi - bi * x - ai * y];\n  };\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n      alpha = 0, // post-rotate\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent\n      delta2 = 0.5, // precision\n      projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\n        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n","import {asin, atan2, cos, sin, sqrt} from \"../math\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {asin, sqrt} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {acos, sin} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n","import projection from \"./index\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n","import {asin, cos, epsilon, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n","import {atan, exp, halfPi, log, tan} from \"../math\";\nimport {mercatorProjection} from \"./mercator\";\n\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n","export var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var ceil = Math.ceil;\nexport var cos = Math.cos;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var pow = Math.pow;\nexport var round = Math.round;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sin = Math.sin;\nexport var tan = Math.tan;\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var sqrt1_2 = Math.SQRT1_2;\nexport var sqrt2 = sqrt(2);\nexport var sqrtPi = sqrt(pi);\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport function sinci(x) {\n  return x ? x / Math.sin(x) : 1;\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function sqrt(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\n\nexport function tanh(x) {\n  x = exp(2 * x);\n  return (x - 1) / (x + 1);\n}\n\nexport function sinh(x) {\n  return (exp(x) - exp(-x)) / 2;\n}\n\nexport function cosh(x) {\n  return (exp(x) + exp(-x)) / 2;\n}\n\nexport function arsinh(x) {\n  return log(x + sqrt(x * x + 1));\n}\n\nexport function arcosh(x) {\n  return log(x + sqrt(x * x - 1));\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, halfPi, log, radians, sin, sqrt, tan} from \"./math\";\n\nexport function airyRaw(beta) {\n  var tanBeta_2 = tan(beta / 2),\n      b = 2 * log(cos(beta / 2)) / (tanBeta_2 * tanBeta_2);\n\n  function forward(x, y) {\n    var cosx = cos(x),\n        cosy = cos(y),\n        siny = sin(y),\n        cosz = cosy * cosx,\n        k = -((1 - cosz ? log((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));\n    return [k * cosy * sin(x), k * siny];\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y),\n        z = -beta / 2,\n        i = 50, delta;\n    if (!r) return [0, 0];\n    do {\n      var z_2 = z / 2,\n          cosz_2 = cos(z_2),\n          sinz_2 = sin(z_2),\n          tanz_2 = tan(z_2),\n          lnsecz_2 = log(1 / cosz_2);\n      z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2));\n    } while (abs(delta) > epsilon && --i > 0);\n    var sinz = sin(z);\n    return [atan2(x * sinz, r * cos(z)), asin(y * sinz / r)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var beta = halfPi,\n      m = projectionMutator(airyRaw),\n      p = m(beta);\n\n  p.radius = function(_) {\n    return arguments.length ? m(beta = _ * radians) : beta * degrees;\n  };\n\n  return p\n      .scale(179.976)\n      .clipAngle(147);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, pi, sin, sinci, sqrt} from \"./math\";\n\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n}\n\n// Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\naitoffRaw.invert = function(x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x, y1 = y, i = 25;\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n  return [x1, y1];\n};\n\nexport default function() {\n  return projection(aitoffRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, atan2, cos, degrees, epsilon, radians, sin, tan} from \"./math\";\n\nexport function armadilloRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      k = (1 + sinPhi0 - cosPhi0) / 2;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        cosLambda = cos(lambda /= 2);\n    return [\n      (1 + cosPhi) * sin(lambda),\n      (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = 0,\n        phi = 0,\n        i = 50;\n    do {\n      var cosLambda = cos(lambda),\n          sinLambda = sin(lambda),\n          cosPhi = cos(phi),\n          sinPhi = sin(phi),\n          A = 1 + cosPhi,\n          fx = A * sinLambda - x,\n          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\n          dxdLambda = A * cosLambda / 2,\n          dxdPhi = -sinLambda * sinPhi,\n          dydLambda = sinPhi0 * A * sinLambda / 2,\n          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\n          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\n          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\n          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n      lambda -= dLambda, phi -= dPhi;\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var phi0 = 20 * radians,\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      m = projectionMutator(armadilloRaw),\n      p = m(phi0),\n      stream_ = p.stream;\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n    return m(phi0);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90) sphereStream.point(lambda, sPhi0 * 90);\n      while (sPhi0 * (lambda -= phi0) >= -180) { // TODO precision?\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(218.695)\n      .center([0, 28.0974]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan} from \"./math\";\n\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [\n    4 / 3 * x * (3 + x2 - 3 * y2),\n    4 / 3 * y * (3 + 3 * x2 - y2)\n  ];\n}\n\naugustRaw.invert = function(x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [\n    sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),\n    sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)\n  ];\n};\n\nexport default function() {\n  return projection(augustRaw)\n      .scale(66.1603);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan} from \"./math\";\n\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\n\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi\n      ? [lambda, log(tan(quarterPi + phi / 2))]\n      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function(x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi, i = 25, delta, y0;\n  do {\n    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function() {\n  return projection(bakerRaw)\n      .scale(112.314);\n}\n","import {geoProjectionMutator as projectionMutator, geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {abs, acos, asin, atan, atan2, cos, degrees, halfPi, pi, radians, round, sin, sqrt, tan} from \"./math\";\n\nexport function berghausRaw(lobes) {\n  var k = 2 * pi / lobes;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi);\n    if (abs(lambda) > halfPi) { // back hemisphere\n      var theta = atan2(p[1], p[0]),\n          r = sqrt(p[0] * p[0] + p[1] * p[1]),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          α = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end\n      theta = theta0 + asin(pi / r * sin(α)) - α;\n      p[0] = r * cos(theta);\n      p[1] = r * sin(theta);\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y);\n    if (r > halfPi) {\n      var theta = atan2(y, x),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          s = theta > theta0 ? -1 : 1,\n          A = r * cos(theta0 - theta),\n          cotα = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));\n      theta = theta0 + 2 * atan((cotα + s * sqrt(cotα * cotα - 3)) / 3);\n      x = r * cos(theta), y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var lobes = 5,\n      m = projectionMutator(berghausRaw),\n      p = m(lobes),\n      projectionStream = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.lobes = function(_) {\n    return arguments.length ? m(lobes = +_) : lobes;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = projectionStream(stream),\n        sphereStream = (p.rotate([0, 0]), projectionStream(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {\n        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);\n        if (phi < -90) {\n          sphereStream.point(-90, -180 - phi - epsilon);\n          sphereStream.point(-90, -180 - phi + epsilon);\n        } else {\n          sphereStream.point(90, phi + epsilon);\n          sphereStream.point(90, phi - epsilon);\n        }\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(87.8076)\n      .center([0, 17.1875])\n      .clipAngle(180 - 1e-3);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2} from \"./math\";\n\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi), i = 30, delta;\n  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  while (abs(delta) > epsilon && --i > 0);\n  return phi / 2;\n}\n\nexport function mollweideBromleyRaw(cx, cy, cp) {\n\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function(x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\n\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\n\nexport default function() {\n  return projection(mollweideRaw)\n      .scale(169.529);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideBromleyTheta} from \"./mollweide\";\nimport {abs, cos, epsilon, pi, quarterPi, sin, sqrt2} from \"./math\";\n\nvar k = 2.00276,\n    w = 1.11072;\n\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function(x, y) {\n  var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function() {\n  return projection(boggsRaw)\n      .scale(160.857);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {degrees, radians} from \"./math\";\n\nexport default function(projectAt) {\n  var phi0 = 0,\n      m = projectionMutator(projectAt),\n      p = m(phi0);\n\n  p.parallel = function(_) {\n    return arguments.length ? m(phi0 = _ * radians) : phi0 * degrees;\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos} from \"./math\";\n\nexport function sinusoidalRaw(lambda, phi) {\n  return [lambda * cos(phi), phi];\n}\n\nsinusoidalRaw.invert = function(x, y) {\n  return [x / cos(y), y];\n};\n\nexport default function() {\n  return projection(sinusoidalRaw)\n      .scale(152.63);\n}\n","import parallel1 from \"./parallel1\";\nimport {atan2, cos, sin, sqrt, tan} from \"./math\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\n\nexport function bonneRaw(phi0) {\n  if (!phi0) return sinusoidalRaw;\n  var cotPhi0 = 1 / tan(phi0);\n\n  function forward(lambda, phi) {\n    var rho = cotPhi0 + phi0 - phi,\n        e = rho ? lambda * cos(phi) / rho : rho;\n    return [rho * sin(e), cotPhi0 - rho * cos(e)];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),\n        phi = cotPhi0 + phi0 - rho;\n    return [rho / cos(phi) * atan2(x, y), phi];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(bonneRaw)\n      .scale(123.082)\n      .center([0, 26.1441])\n      .parallel(45);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {atan2, cos, halfPi, sin, sqrt} from \"./math\";\n\nexport function bottomleyRaw(sinPsi) {\n\n  function forward(lambda, phi) {\n    var rho = halfPi - phi,\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\n  }\n\n  forward.invert = function(x, y) {\n    var x1 = x * sinPsi,\n        y1 = halfPi - y,\n        rho = sqrt(x1 * x1 + y1 * y1),\n        eta = atan2(x1, y1);\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var sinPsi = 0.5,\n      m = projectionMutator(bottomleyRaw),\n      p = m(sinPsi);\n\n  p.fraction = function(_) {\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\n  };\n\n  return p\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi} from \"./math\";\nimport {mollweideBromleyRaw} from \"./mollweide\";\n\nexport var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);\n\nexport default function() {\n  return projection(bromleyRaw)\n      .scale(152.63);\n}\n","import {geoCentroid as centroid, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt} from \"./math\";\n\n// Azimuthal distance.\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\n  var cosdLambda = cos(dLambda), r;\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\n  } else {\n    var sindPhi = sin(dPhi / 2), sindLambda = sin(dLambda / 2);\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\n  }\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\n}\n\n// Angle opposite a, and contained between sides of lengths b and c.\nfunction angle(b, c, a) {\n  return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n// Normalize longitude.\nfunction longitude(lambda) {\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\n}\n\nexport function chamberlinRaw(p0, p1, p2) {\n  var points = [\n    [p0[0], p0[1], sin(p0[1]), cos(p0[1])],\n    [p1[0], p1[1], sin(p1[1]), cos(p1[1])],\n    [p2[0], p2[1], sin(p2[1]), cos(p2[1])]\n  ];\n\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n    b = points[i];\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n    a.point = [0, 0];\n  }\n\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\n      beta2 = pi - beta0;\n\n  points[2].point[1] = 0;\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\n\n  var mean = [\n    points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0),\n    2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))\n  ];\n\n  function forward(lambda, phi) {\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        v = new Array(3), i;\n\n    // Compute distance and azimuth from control points.\n    for (i = 0; i < 3; ++i) {\n      var p = points[i];\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\n      if (!v[i][0]) return p.point;\n      v[i][1] = longitude(v[i][1] - p.v[1]);\n    }\n\n    // Arithmetic mean of interception points.\n    var point = mean.slice();\n    for (i = 0; i < 3; ++i) {\n      var j = i == 2 ? 0 : i + 1;\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\n      if (v[i][1] < 0) a = -a;\n\n      if (!i) {\n        point[0] += v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else if (i == 1) {\n        a = beta1 - a;\n        point[0] -= v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else {\n        a = beta2 - a;\n        point[0] += v[i][0] * cos(a);\n        point[1] += v[i][0] * sin(a);\n      }\n    }\n\n    point[0] /= 3, point[1] /= 3;\n    return point;\n  }\n\n  return forward;\n}\n\nfunction pointRadians(p) {\n  return p[0] *= radians, p[1] *= radians, p;\n}\n\nexport function chamberlinAfrica() {\n  return chamberlin([0, 22], [45, 22], [22.5, -22])\n      .scale(380)\n      .center([22.5, 2]);\n}\n\nexport default function chamberlin(p0, p1, p2) { // TODO order matters!\n  var c = centroid({type: \"MultiPoint\", coordinates: [p0, p1, p2]}),\n      R = [-c[0], -c[1]],\n      r = rotation(R),\n      p = projection(chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)))).rotate(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, pi, sin, sqrt, sqrtPi} from \"./math\";\n\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [(2 / sqrtPi) * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function(x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function() {\n  return projection(collignonRaw)\n      .scale(95.6464)\n      .center([0, 30]);\n}\n","import {asin, atan2, cos, sin, sqrt, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function craigRaw(phi0) {\n  var tanPhi0 = tan(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\n  }\n\n  forward.invert = tanPhi0 ? function(x, y) {\n    if (x) y *= sin(x) / x;\n    var cosλ = cos(x);\n    return [x, 2 * atan2(sqrt(cosλ * cosλ + tanPhi0 * tanPhi0 - y * y) - cosλ, tanPhi0 - y)];\n  } : function(x, y) {\n    return [x, asin(x ? y * tan(x) / x : y)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(craigRaw)\n      .scale(249.828)\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt, sqrtPi} from \"./math\";\n\nvar sqrt3 = sqrt(3);\n\nexport function crasterRaw(lambda, phi) {\n  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];\n}\n\ncrasterRaw.invert = function(x, y) {\n  var phi = 3 * asin(y / (sqrt3 * sqrtPi));\n  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];\n};\n\nexport default function() {\n  return projection(crasterRaw)\n      .scale(156.19);\n}\n","import {asin, cos, sin} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalEqualAreaRaw)\n      .parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n      .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}\n","import {atan, cos, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function cylindricalStereographicRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalStereographicRaw)\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, pi, sqrt} from \"./math\";\n\nexport function eckert1Raw(lambda, phi) {\n  var alpha = sqrt(8 / (3 * pi));\n  return [\n    alpha * lambda * (1 - abs(phi) / pi),\n    alpha * phi\n  ];\n}\n\neckert1Raw.invert = function(x, y) {\n  var alpha = sqrt(8 / (3 * pi)),\n      phi = y / alpha;\n  return [\n    x / (alpha * (1 - abs(phi) / pi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert1Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, pi, sign, sin, sqrt} from \"./math\";\n\nexport function eckert2Raw(lambda, phi) {\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\n  return [\n    2 / sqrt(6 * pi) * lambda * alpha,\n    sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)\n  ];\n}\n\neckert2Raw.invert = function(x, y) {\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\n  return [\n    x * sqrt(6 * pi) / (2 * alpha),\n    sign(y) * asin((4 - alpha * alpha) / 3)\n  ];\n};\n\nexport default function() {\n  return projection(eckert2Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math\";\n\nexport function eckert3Raw(lambda, phi) {\n  var k = sqrt(pi * (4 + pi));\n  return [\n    2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))),\n    4 / k * phi\n  ];\n}\n\neckert3Raw.invert = function(x, y) {\n  var k = sqrt(pi * (4 + pi)) / 2;\n  return [\n    x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))),\n    y * k / 2\n  ];\n};\n\nexport default function() {\n  return projection(eckert3Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function eckert4Raw(lambda, phi) {\n  var k = (2 + halfPi) * sin(phi);\n  phi /= 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    var cosPhi = cos(phi);\n    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));\n  }\n  return [\n    2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)),\n    2 * sqrt(pi / (4 + pi)) * sin(phi)\n  ];\n}\n\neckert4Raw.invert = function(x, y) {\n  var A = y * sqrt((4 + pi) / pi) / 2,\n      k = asin(A),\n      c = cos(k);\n  return [\n    x / (2 / sqrt(pi * (4 + pi)) * (1 + c)),\n    asin((k + A * (c + 2)) / (2 + halfPi))\n  ];\n};\n\nexport default function() {\n  return projection(eckert4Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos, pi, sqrt} from \"./math\";\n\nexport function eckert5Raw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / sqrt(2 + pi),\n    2 * phi / sqrt(2 + pi)\n  ];\n}\n\neckert5Raw.invert = function(x, y) {\n  var k = sqrt(2 + pi),\n      phi = y * k / 2;\n  return [\n    k * x / (1 + cos(phi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert5Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n  k = sqrt(2 + pi);\n  return [\n    lambda * (1 + cos(phi)) / k,\n    2 * phi / k\n  ];\n}\n\neckert6Raw.invert = function(x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [\n    x * 2 * k / (1 + cos(y *= k)),\n    asin((y + sin(y)) / j)\n  ];\n};\n\nexport default function() {\n  return projection(eckert6Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {augustRaw} from \"./august\";\nimport {abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2} from \"./math\";\n\nvar eisenlohrK = 3 + 2 * sqrt2;\n\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [\n    eisenlohrK * (c * (v - 1 / v) - 2 * log(v)),\n    eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))\n  ];\n}\n\neisenlohrRaw.invert = function(x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0], phi = p[1], i = 20, p;\n  x /= eisenlohrK, y /= eisenlohrK;\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = (sqrt2 * c1 + (c0 + s0) * k),\n        v1 = (sqrt2 * c1 + (c0 - s0) * k),\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(eisenlohrRaw)\n      .scale(62.5271);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, radians, sqrt, tan} from \"./math\";\n\nvar faheyK = cos(35 * radians);\n\nexport function faheyRaw(lambda, phi) {\n  var t = tan(phi / 2);\n  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];\n}\n\nfaheyRaw.invert = function(x, y) {\n  var t = y / (1 + faheyK);\n  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];\n};\n\nexport default function() {\n  return projection(faheyRaw)\n      .scale(137.152);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, sqrtPi, tan} from \"./math\";\n\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2, cosk = cos(k);\n  return [ 2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function(x, y) {\n  var k = atan(y / sqrtPi), cosk = cos(k), phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function() {\n  return projection(foucautRaw)\n      .scale(135.264);\n}\n","import {geoEquirectangular, geoOrthographic} from \"d3-geo\";\nimport {asin, atan, degrees, radians, sin, tan} from \"./math\";\n\nfunction gilbertForward(point) {\n  return [point[0] / 2, asin(tan(point[1] / 2 * radians)) * degrees];\n}\n\nfunction gilbertInvert(point) {\n  return [point[0] * 2, 2 * atan(sin(point[1] * radians)) * degrees];\n}\n\nexport default function(projectionType) {\n  if (projectionType == null) projectionType = geoOrthographic;\n  var projection = projectionType(),\n      equirectangular = geoEquirectangular().scale(degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting\n\n  function gilbert(point) {\n    return projection(gilbertForward(point));\n  }\n\n  if (projection.invert) gilbert.invert = function(point) {\n    return gilbertInvert(projection.invert(point));\n  };\n\n  gilbert.stream = function(stream) {\n    var s1 = projection.stream(stream), s0 = equirectangular.stream({\n      point: function(lambda, phi) { s1.point(lambda / 2, asin(tan(-phi / 2 * radians)) * degrees); },\n      lineStart: function() { s1.lineStart(); },\n      lineEnd: function() { s1.lineEnd(); },\n      polygonStart: function() { s1.polygonStart(); },\n      polygonEnd: function() { s1.polygonEnd(); }\n    });\n    s0.sphere = s1.sphere;\n    return s0;\n  };\n\n  function property(name) {\n    gilbert[name] = function(_) {\n      return arguments.length ? (projection[name](_), gilbert) : projection[name]();\n    };\n  }\n\n  gilbert.rotate = function(_) {\n    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();\n  };\n\n  gilbert.center = function(_) {\n    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());\n  };\n\n  property(\"clipAngle\");\n  property(\"clipExtent\");\n  property(\"scale\");\n  property(\"translate\");\n  property(\"precision\");\n\n  return gilbert\n      .scale(249.5);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt} from \"./math\";\n\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n\n      x = r;\n      var i = 50, delta;\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n\n        if (abs(delta) < epsilon2 || !--i) break;\n\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (\n          sinx - x_halfPi * 2 * (\n            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\n            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)\n          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function(x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n}\n\n// Numerical integration: trapezoidal rule.\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n  return s * 0.5 * h;\n}\n\nexport default function() {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function(_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function(_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .rotate([90, -40])\n      .scale(91.7095)\n      .clipAngle(180 - 1e-3);\n}\n","import {abs, asin, cos, epsilon, pi, sin, sqrt} from \"./math\";\n\nexport default function(a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda, deltaPhi, i = 50;\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = ((lambda / pi) * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi)) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);\n\nexport default function() {\n  return projection(ginzburg4Raw)\n      .scale(149.995);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435,0.082742);\n\nexport default function() {\n  return projection(ginzburg5Raw)\n      .scale(153.93);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\nimport {pi} from \"./math\";\n\nexport var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);\n\nexport default function() {\n  return projection(ginzburg6Raw)\n      .scale(130.945);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [\n    lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2),\n    phi * (1 + phi2 / 12)\n  ];\n}\n\nginzburg8Raw.invert = function(x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50, delta;\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n  i = 50;\n  x /= 1 -0.162388 * phi2;\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(ginzburg8Raw)\n      .scale(131.747);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic\";\n\nexport var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965,0.031762);\n\nexport default function() {\n  return projection(ginzburg9Raw)\n      .scale(131.087);\n}\n","import {halfPi, pi} from \"./math\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectSquare(lambda, phi) {\n    var s = lambda > 0 ? -0.5 : 0.5,\n        point = project(lambda + s * pi, phi);\n    point[0] -= s * dx;\n    return point;\n  }\n\n  if (project.invert) projectSquare.invert = function(x, y) {\n    var s = x > 0 ? -0.5 : 0.5,\n        location = project.invert(x + s * dx, y),\n        lambda = location[0] - s * pi;\n    if (lambda < -pi) lambda += 2 * pi;\n    else if (lambda > pi) lambda -= 2 * pi;\n    location[0] = lambda;\n    return location;\n  };\n\n  return projectSquare;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return (point[0] *= sLambda, point[1] *= -sPhi, point);\n}\n\ngringortenRaw.invert = function(x, y) {\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n\n  if (lambda === 0) return [0, -(h + r * a)];\n\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = (0.5 * dp2dPhi) / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta;\n\n  // Slower but accurate bisection method.\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x, x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n    do {\n      var g = sqrt(a2 - x * x),\n          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;\n      else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  }\n\n  // Newton-Raphson.\n  else {\n    x = epsilon, i = 25;\n    do {\n      var x2 = x * x,\n          g2 = sqrt(a2 - x2),\n          zetaMug = zeta + mu * g2,\n          f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n          df = zetaMug + (nu - mu * x2) / g2;\n      x -= delta = g2 ? f2 / df : 0;\n    } while (abs(delta) > epsilon && --i > 0);\n  }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = (1 - r2) + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;\n    else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function() {\n  return projection(squareRaw(gringortenRaw))\n      .scale(239.75);\n}\n","import {abs, asin, atan, cos, cosh, epsilon, exp, halfPi, log, pi, pow, quarterPi, sign, sin, sinh, sqrt, tan, tanh} from \"./math\";\n\n// Returns [sn, cn, dn](u + iv|m).\nexport function ellipticJi(u, v, m) {\n  var a, b, c;\n  if (!u) {\n    b = ellipticJ(v, 1 - m);\n    return [\n      [0, b[0] / b[1]],\n      [1 / b[1], 0],\n      [b[2] / b[1], 0]\n    ];\n  }\n  a = ellipticJ(u, m);\n  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];\n  b = ellipticJ(v, 1 - m);\n  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\n  return [\n    [a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c],\n    [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c],\n    [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]\n  ];\n}\n\n// Returns [sn, cn, dn, ph](u|m).\nexport function ellipticJ(u, m) {\n  var ai, b, phi, t, twon;\n  if (m < epsilon) {\n    t = sin(u);\n    b = cos(u);\n    ai = m * (u - t * b) / 4;\n    return [\n      t - ai * b,\n      b + ai * t,\n      1 - m * t * t / 2,\n      u - ai\n    ];\n  }\n  if (m >= 1 - epsilon) {\n    ai = (1 - m) / 4;\n    b = cosh(u);\n    t = tanh(u);\n    phi = 1 / b;\n    twon = b * sinh(u);\n    return [\n      t + ai * (twon - u) / (b * b),\n      phi - ai * t * phi * (twon - u),\n      phi + ai * t * phi * (twon + u),\n      2 * atan(exp(u)) - halfPi + ai * (twon - u) / b\n    ];\n  }\n\n  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],\n      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],\n      i = 0;\n  b = sqrt(1 - m);\n  twon = 1;\n\n  while (abs(c[i] / a[i]) > epsilon && i < 8) {\n    ai = a[i++];\n    c[i] = (ai - b) / 2;\n    a[i] = (ai + b) / 2;\n    b = sqrt(ai * b);\n    twon *= 2;\n  }\n\n  phi = twon * a[i] * u;\n  do {\n    t = c[i] * sin(b = phi) / a[i];\n    phi = (asin(t) + phi) / 2;\n  } while (--i);\n\n  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];\n}\n\n// Calculate F(phi+iPsi|m).\n// See Abramowitz and Stegun, 17.4.11.\nexport function ellipticFi(phi, psi, m) {\n  var r = abs(phi),\n      i = abs(psi),\n      sinhPsi = sinh(i);\n  if (r) {\n    var cscPhi = 1 / sin(r),\n        cotPhi2 = 1 / (tan(r) * tan(r)),\n        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),\n        c = (m - 1) * cotPhi2,\n        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;\n    return [\n      ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi),\n      ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)\n    ];\n  }\n  return [\n    0,\n    ellipticF(atan(sinhPsi), 1 - m) * sign(psi)\n  ];\n}\n\n// Calculate F(phi|m) where m = k² = sin²α.\n// See Abramowitz and Stegun, 17.6.7.\nexport function ellipticF(phi, m) {\n  if (!m) return phi;\n  if (m === 1) return log(tan(phi / 2 + quarterPi));\n  var a = 1,\n      b = sqrt(1 - m),\n      c = sqrt(m);\n  for (var i = 0; abs(c) > epsilon; i++) {\n    if (phi % pi) {\n      var dPhi = atan(b * tan(phi) / a);\n      if (dPhi < 0) dPhi += pi;\n      phi += dPhi + ~~(phi / pi) * pi;\n    } else phi += phi;\n    c = (a + b) / 2;\n    b = sqrt(a * b);\n    c = ((a = c) - b) / 2;\n  }\n  return phi / (pow(2, i) * a);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {ellipticF, ellipticFi, ellipticJi} from \"./elliptic\";\nimport {abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [\n   0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),\n    -0.25 * log(t * t + 4 * x2) +0.5 * log(y_1 * y_1 + x2)\n  ];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [\n    (a[0] * b[0] + a[1] * b[1]) / denominator,\n    (a[1] * b[0] - a[0] * b[1]) / denominator\n  ];\n}\n\nguyouRaw.invert = function(x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [\n    lambda,\n    2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi\n  ];\n};\n\nexport default function() {\n  return projection(squareRaw(guyouRaw))\n      .scale(151.496);\n}\n","import {geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {asin, cos, sin} from \"./math\";\n\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [\n    lambda * cos(phi) / cos(phi /= 2),\n    2 * sin(phi)\n  ];\n}\n\nhammerQuarticAuthalicRaw.invert = function(x, y) {\n  var phi = 2 * asin(y / 2);\n  return [\n    x * cos(phi / 2) / cos(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function(_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p\n    .scale(169.529);\n}\n","import {geoProjectionMutator as projectionMutator, geoCircle} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, degrees, epsilon, halfPi, radians, sqrt, sin} from \"./math\";\n\nexport function hammerRetroazimuthalRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      rotate = hammerRetroazimuthalRotation(phi0);\n\n  rotate.invert = hammerRetroazimuthalRotation(-phi0);\n\n  function forward(lambda, phi) {\n    var p = rotate(lambda, phi);\n    lambda = p[0], phi = p[1];\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        cosLambda = cos(lambda),\n        z = acos(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),\n        sinz = sin(z),\n        K = abs(sinz) > epsilon ? z / sinz : 1;\n    return [\n      K * cosPhi0 * sin(lambda),\n      (abs(lambda) > halfPi ? K : -K) // rotate for back hemisphere\n        * (sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + y * y),\n        sinz = -sin(rho),\n        cosz = cos(rho),\n        a = rho * cosz,\n        b = -y * sinz,\n        c = rho * sinPhi0,\n        d = sqrt(a * a + b * b - c * c),\n        phi = atan2(a * c + b * d, b * c - a * d),\n        lambda = (rho > halfPi ? -1 : 1) * atan2(x * sinz, rho * cos(phi) * cosz + y * sin(phi) * sinz);\n    return rotate.invert(lambda, phi);\n  };\n\n  return forward;\n}\n\n// Latitudinal rotation by phi0.\n// Temporary hack until D3 supports arbitrary small-circle clipping origins.\nfunction hammerRetroazimuthalRotation(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0);\n\n  return function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi);\n    return [\n      atan2(y, x * cosPhi0 - z * sinPhi0),\n      asin(z * cosPhi0 + x * sinPhi0)\n    ];\n  };\n}\n\nexport default function() {\n  var phi0 = 0,\n      m = projectionMutator(hammerRetroazimuthalRaw),\n      p = m(phi0),\n      rotate_ = p.rotate,\n      stream_ = p.stream,\n      circle = geoCircle();\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    var r = p.rotate();\n    return m(phi0 = _ * radians).rotate(r);\n  };\n\n  // Temporary hack; see hammerRetroazimuthalRotation.\n  p.rotate = function(_) {\n    if (!arguments.length) return (_ = rotate_.call(p), _[1] += phi0 * degrees, _);\n    rotate_.call(p, [_[0], _[1] - phi0 * degrees]);\n    circle.center([-_[0], -_[1]]);\n    return p;\n  };\n\n  p.stream = function(stream) {\n    stream = stream_(stream);\n    stream.sphere = function() {\n      stream.polygonStart();\n      var epsilon = 1e-2,\n          ring = circle.radius(90 - epsilon)().coordinates[0],\n          n = ring.length - 1,\n          i = -1,\n          p;\n      stream.lineStart();\n      while (++i < n) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      ring = circle.radius(90 + epsilon)().coordinates[0];\n      n = ring.length - 1;\n      stream.lineStart();\n      while (--i >= 0) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      stream.polygonEnd();\n    };\n    return stream;\n  };\n\n  return p\n      .scale(79.4187)\n      .parallel(45)\n      .clipAngle(180 - 1e-3);\n}\n","import {range} from \"d3-array\";\nimport {geoStream, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {collignonRaw} from \"./collignon\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\nimport {abs, floor, max, min, pi, radians, sqrtPi, tau} from \"./math\";\n\nvar healpixParallel = 41 + 48 / 36 + 37 / 3600, // for K=3; TODO automate\n    healpixLambert = cylindricalEqualAreaRaw(0);\n\nexport function healpixRaw(H) {\n  var phi0 = healpixParallel * radians,\n      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],\n      y0 = healpixLambert(0, phi0)[1],\n      y1 = collignonRaw(0, phi0)[1],\n      dy1 = sqrtPi - y1,\n      k = tau / H,\n      w = 4 / tau,\n      h = y0 + (dy1 * dy1 * 4) / tau;\n\n  function forward(lambda, phi) {\n    var point,\n        phi2 = abs(phi);\n    if (phi2 > phi0) {\n      var i = min(H - 1, max(0, floor((lambda + pi) / k)));\n      lambda += pi * (H - 1) / H - i * k;\n      point = collignonRaw(lambda, phi2);\n      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;\n      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;\n      if (phi < 0) point[1] = -point[1];\n    } else {\n      point = healpixLambert(lambda, phi);\n    }\n    point[0] *= w, point[1] /= h;\n    return point;\n  }\n\n  forward.invert = function(x, y) {\n    x /= w, y *= h;\n    var y2 = abs(y);\n    if (y2 > y0) {\n      var i = min(H - 1, max(0, floor((x + pi) / k)));\n      x = (x + pi * (H - 1) / H - i * k) * dx / tau;\n      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);\n      point[0] -= pi * (H - 1) / H - i * k;\n      if (y < 0) point[1] = -point[1];\n      return point;\n    }\n    return healpixLambert.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction sphere(step) {\n  return {\n    type: \"Polygon\",\n    coordinates: [\n      range(-180, 180 + step / 2, step).map(function(x, i) { return [x, i & 1 ? 90 - 1e-6 : healpixParallel]; })\n      .concat(range(180, -180 - step / 2, -step).map(function(x, i) { return [x, i & 1 ? -90 + 1e-6 : -healpixParallel]; }))\n    ]\n  };\n}\n\nexport default function() {\n  var H = 4,\n      m = projectionMutator(healpixRaw),\n      p = m(H),\n      stream_ = p.stream;\n\n  p.lobes = function(_) {\n    return arguments.length ? m(H = +_) : H;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere(180 / H), sphereStream); };\n    return rotateStream;\n  };\n\n  return p\n      .scale(239.75);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon2, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function hillRaw(K) {\n  var L = 1 + K,\n      sinBt = sin(1 / L),\n      Bt = asin(sinBt),\n      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),\n      B,\n      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),\n      K2 = K * K,\n      L2 = L * L;\n\n  function forward(lambda, phi) {\n    var t = 1 - sin(phi),\n        rho,\n        omega;\n    if (t && t < 2) {\n      var theta = halfPi - phi, i = 25, delta;\n      do {\n        var sinTheta = sin(theta),\n            cosTheta = cos(theta),\n            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),\n            C = 1 + L2 - 2 * L * cosTheta;\n        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 -0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);\n      } while (abs(delta) > epsilon2 && --i > 0);\n      rho = A * sqrt(C);\n      omega = lambda * Bt_Bt1 / pi;\n    } else {\n      rho = A * (K + t);\n      omega = lambda * Bt / pi;\n    }\n    return [\n      rho * sin(omega),\n      rho0 - rho * cos(omega)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + (y -= rho0) * y,\n        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),\n        theta = acos(cosTheta),\n        sinTheta = sin(theta),\n        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);\n    return [\n      asin(x / sqrt(rho2)) * pi / Bt_Bt1,\n      asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var K = 1,\n      m = projectionMutator(hillRaw),\n      p = m(K);\n\n  p.ratio = function(_) {\n    return arguments.length ? m(K = +_) : K;\n  };\n\n  return p\n      .scale(167.774)\n      .center([0, 18.67]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideRaw} from \"./mollweide\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\n\nexport var sinuMollweidePhi = 0.7109889596207567;\n\nexport var sinuMollweideY = 0.0528035274542;\n\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function(x, y) {\n  return y > -sinuMollweidePhi\n      ? mollweideRaw.invert(x, y - sinuMollweideY)\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(sinuMollweideRaw)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs} from \"./math\";\nimport {mollweideRaw} from \"./mollweide\";\nimport {sinusoidalRaw} from \"./sinusoidal\";\nimport {sinuMollweidePhi, sinuMollweideY} from \"./sinuMollweide\";\n\nexport function homolosineRaw(lambda, phi) {\n  return abs(phi) > sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nhomolosineRaw.invert = function(x, y) {\n  return abs(y) > sinuMollweidePhi\n      ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY))\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(homolosineRaw)\n      .scale(152.63);\n}\n","import {merge} from \"d3-array\";\nimport {geoStream, geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, radians} from \"../math\";\n\nfunction pointEqual(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n\nfunction interpolateLine(coordinates, m) {\n  var i = -1,\n      n = coordinates.length,\n      p0 = coordinates[0],\n      p1,\n      dx,\n      dy,\n      resampled = [];\n  while (++i < n) {\n    p1 = coordinates[i];\n    dx = (p1[0] - p0[0]) / m;\n    dy = (p1[1] - p0[1]) / m;\n    for (var j = 0; j < m; ++j) resampled.push([p0[0] + j * dx, p0[1] + j * dy]);\n    p0 = p1;\n  }\n  resampled.push(p1);\n  return resampled;\n}\n\nfunction interpolateSphere(lobes) {\n  var coordinates = [],\n      lobe,\n      lambda0, phi0, phi1,\n      lambda2, phi2,\n      i, n = lobes[0].length;\n\n  // Northern Hemisphere\n  for (i = 0; i < n; ++i) {\n    lobe = lobes[0][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda0 + epsilon, phi0 + epsilon],\n      [lambda0 + epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi2 + epsilon]\n    ], 30));\n  }\n\n  // Southern Hemisphere\n  for (i = lobes[1].length - 1; i >= 0; --i) {\n    lobe = lobes[1][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda2 - epsilon, phi2 - epsilon],\n      [lambda2 - epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi0 - epsilon]\n    ], 30));\n  }\n\n  return {\n    type: \"Polygon\",\n    coordinates: [merge(coordinates)]\n  };\n}\n\nexport default function(project, lobes) {\n  var sphere = interpolateSphere(lobes);\n\n  lobes = lobes.map(function(lobe) {\n    return lobe.map(function(l) {\n      return [\n        [l[0][0] * radians, l[0][1] * radians],\n        [l[1][0] * radians, l[1][1] * radians],\n        [l[2][0] * radians, l[2][1] * radians]\n      ];\n    });\n  });\n\n  var bounds = lobes.map(function(lobe) {\n    return lobe.map(function(l) {\n      var x0 = project(l[0][0], l[0][1])[0],\n          x1 = project(l[2][0], l[2][1])[0],\n          y0 = project(l[1][0], l[0][1])[1],\n          y1 = project(l[1][0], l[1][1])[1],\n          t;\n      if (y0 > y1) t = y0, y0 = y1, y1 = t;\n      return [[x0, y0], [x1, y1]];\n    });\n  });\n\n  function forward(lambda, phi) {\n    var sign = phi < 0 ? -1 : +1, lobe = lobes[+(phi < 0)];\n    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i);\n    var p = project(lambda - lobe[i][1][0], phi);\n    p[0] += project(lobe[i][1][0], sign * phi > sign * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];\n    return p;\n  }\n\n  // Assumes mutually exclusive bounding boxes for lobes.\n  if (project.invert) forward.invert = function(x, y) {\n    var bound = bounds[+(y < 0)], lobe = lobes[+(y < 0)];\n    for (var i = 0, n = bound.length; i < n; ++i) {\n      var b = bound[i];\n      if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {\n        var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);\n        p[0] += lobe[i][1][0];\n        return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;\n      }\n    }\n  };\n\n  var p = projection(forward),\n      stream_ = p.stream;\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere, sphereStream); };\n    return rotateStream;\n  };\n\n  return p;\n}\n","import {boggsRaw} from \"../boggs\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(boggsRaw, lobes)\n      .scale(160.857);\n}\n","import {homolosineRaw} from \"../homolosine\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(homolosineRaw, lobes)\n      .scale(152.63);\n}\n","import {mollweideRaw} from \"../mollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529);\n}\n","import {mollweideRaw} from \"../mollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [ -90,  90], [   0,   0]],\n  [[   0,   0], [  90,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [ -90, -90], [   0,   0]],\n  [[   0,   0], [  90, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529)\n      .rotate([20, 0]);\n}\n","import {sinuMollweideRaw} from \"../sinuMollweide\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,  35], [ -30,  90], [   0,  35]],\n  [[   0,  35], [  30,  90], [ 180,  35]]\n], [ // southern hemisphere\n  [[-180, -10], [-102, -90], [ -65, -10]],\n  [[ -65, -10], [   5, -90], [  77, -10]],\n  [[  77, -10], [ 103, -90], [ 180, -10]]\n]];\n\nexport default function() {\n  return interrupt(sinuMollweideRaw, lobes)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {sinusoidalRaw} from \"../sinusoidal\";\nimport interrupt from \"./index\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-110,  90], [ -40,   0]],\n  [[ -40,   0], [   0,  90], [  40,   0]],\n  [[  40,   0], [ 110,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-110, -90], [ -40,   0]],\n  [[ -40,   0], [   0, -90], [  40,   0]],\n  [[  40,   0], [ 110, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(sinusoidalRaw, lobes)\n      .scale(152.63)\n      .rotate([-20, 0]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt, tau} from \"./math\";\n\nexport function kavrayskiy7Raw(lambda, phi) {\n  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];\n}\n\nkavrayskiy7Raw.invert = function(x, y) {\n  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];\n};\n\nexport default function() {\n  return projection(kavrayskiy7Raw)\n      .scale(158.837);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, epsilon, halfPi, pow, sign, sin} from \"./math\";\n\nexport function lagrangeRaw(n) {\n\n  function forward(lambda, phi) {\n    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];\n    var sinPhi = sin(phi),\n        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),\n        c = 0.5 * (v + 1 / v) + cos(lambda *= n);\n    return [\n      2 * sin(lambda) / c,\n      (v - 1 / v) / c\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y0 = abs(y);\n    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];\n    if (y0 > 2) return null;\n\n    x /= 2, y /= 2;\n    var x2 = x * x,\n        y2 = y * y,\n        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)\n    t = pow((1 + t) / (1 - t), 1 / n);\n    return [\n      atan2(2 * x, 1 - x2 - y2) / n,\n      asin((t - 1) / (t + 1))\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var n = 0.5,\n      m = projectionMutator(lagrangeRaw),\n      p = m(n);\n\n  p.spacing = function(_) {\n    return arguments.length ? m(n = +_) : n;\n  };\n\n  return p\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2} from \"./math\";\n\nvar pi_sqrt2 = pi / sqrt2;\n\nexport function larriveeRaw(lambda, phi) {\n  return [\n    lambda * (1 + sqrt(cos(phi))) / 2,\n    phi / (cos(phi / 2) * cos(lambda / 6))\n  ];\n}\n\nlarriveeRaw.invert = function(x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;\n  else lambda += 6 * acos(pi_sqrt2 / y0);\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 +0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = (phi / cosPhi_2) * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function() {\n  return projection(larriveeRaw)\n      .scale(97.2672);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, pi, sign} from \"./math\";\n\nexport function laskowskiRaw(lambda, phi) {\n  var lambda2 = lambda * lambda, phi2 = phi * phi;\n  return [\n    lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)),\n    phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))\n  ];\n}\n\nlaskowskiRaw.invert = function(x, y) {\n  var lambda = sign(x) * pi,\n      phi = y / 2,\n      i = 50;\n  do {\n    var lambda2 = lambda * lambda,\n        phi2 = phi * phi,\n        lambdaPhi = lambda * phi,\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda, phi -= deltaPhi;\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(laskowskiRaw)\n      .scale(139.98);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {acos, asin, cos, sign, sin, tan, sqrt, sqrt1_2} from \"./math\";\n\nexport function littrowRaw(lambda, phi) {\n  return [\n    sin(lambda) / cos(phi),\n    tan(phi) * cos(lambda)\n  ];\n}\n\nlittrowRaw.invert = function(x, y) {\n  var x2 = x * x,\n      y2 = y * y,\n      y2_1 = y2 + 1,\n      cosPhi = x\n          ? sqrt1_2 * sqrt((y2_1 - sqrt(x2 * x2 + 2 * x2 * (y2 - 1) + y2_1 * y2_1)) / x2 + 1)\n          : 1 / sqrt(y2_1);\n  return [\n    asin(x * cosPhi),\n    sign(y) * acos(cosPhi)\n  ];\n};\n\nexport default function() {\n  return projection(littrowRaw)\n      .scale(144.049)\n      .clipAngle(90 - 1e-3);\n}\n","import parallel1 from \"./parallel1\";\nimport {abs, cos, epsilon, halfPi, log, quarterPi, tan} from \"./math\";\n\nexport function loximuthalRaw(phi0) {\n  var cosPhi0 = cos(phi0),\n      tanPhi0 = tan(quarterPi + phi0 / 2);\n\n  function forward(lambda, phi) {\n    var y = phi - phi0,\n        x = abs(y) < epsilon ? lambda * cosPhi0\n            : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon\n            ? 0 : lambda * y / log(tan(x) / tanPhi0);\n    return [x, y];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda,\n        phi = y + phi0;\n    return [\n      abs(y) < epsilon ? x / cosPhi0\n          : (abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon) ? 0\n          : x * log(tan(lambda) / tanPhi0) / y,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(loximuthalRaw)\n      .parallel(40)\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, exp, log, quarterPi, pi, tan} from \"./math\";\n\nexport function millerRaw(lambda, phi) {\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\n}\n\nmillerRaw.invert = function(x, y) {\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\n};\n\nexport default function() {\n  return projection(millerRaw)\n      .scale(108.318);\n}\n","import {geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, epsilon, sin, sqrt} from \"./math\";\n\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = 2 / (1 + cosPhi * cos(lambda)),\n        zr = k * cosPhi * sin(lambda),\n        zi = k * sin(phi),\n        i = m,\n        w = C[i],\n        ar = w[0],\n        ai = w[1],\n        t;\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n\n  forward.invert = function(x, y) {\n    var i = 20,\n        zr = x,\n        zi = y;\n    do {\n      var j = m,\n          w = C[j],\n          ar = w[0],\n          ai = w[1],\n          br = 0,\n          bi = 0,\n          t;\n\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n\n      var denominator = br * br + bi * bi, deltar, deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n          c = 2 * atan(rho * 0.5),\n          sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n\n  return forward;\n}\n\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\n\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64])\n      .scale(1500)\n      .center([-160.908, 62.4864])\n      .clipAngle(25);\n}\n\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38])\n      .scale(1000)\n      .clipAngle(55)\n      .center([-96.5563, 38.8675]);\n}\n\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45])\n      .scale(359.513)\n      .clipAngle(55)\n      .center([-117.474, 53.0628]);\n}\n\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18])\n      .scale(209.091)\n      .center([20, 16.7214])\n      .clipAngle(82);\n}\n\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10])\n      .scale(250)\n      .clipAngle(130)\n      .center([-165, -10]);\n}\n\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n      r = rotation(rotate),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt} from \"./math\";\n\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\n\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [\n    sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,\n    9 * sin(theta / 3) / sqrt7\n  ];\n}\n\nmtFlatPolarParabolicRaw.invert = function(x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [\n    x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),\n    asin(sin(theta) * 3 * sqrt6 / 7)\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarParabolicRaw)\n      .scale(164.859);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2} from \"./math\";\n\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2),\n    2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)\n  ];\n}\n\nmtFlatPolarQuarticRaw.invert = function(x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [\n    3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)),\n    asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarQuarticRaw)\n      .scale(188.209);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    A * (0.5 + cos(theta)) * lambda / 1.5,\n    A * theta\n  ];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function(x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [\n    1.5 * x / (A * (0.5 + cos(theta))),\n    asin((theta / 2 + sin(theta)) / (1 + pi / 4))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarSinusoidalRaw)\n      .scale(166.518);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\nexport function naturalEarthRaw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarthRaw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarthRaw)\n      .scale(175.295);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, epsilon, tan} from \"./math\";\n\nexport function nellHammerRaw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / 2,\n    2 * (phi - tan(phi / 2))\n  ];\n}\n\nnellHammerRaw.invert = function(x, y) {\n  var p = y / 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n  return [\n    2 * x / (1 + cos(y)),\n    y\n  ];\n};\n\nexport default function() {\n  return projection(nellHammerRaw)\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\n// Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\n\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [\n    lambda,\n    phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))\n  ];\n}\n\npattersonRaw.invert = function(x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;\n  else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y, delta;\n\n  do { // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function() {\n  return projection(pattersonRaw)\n      .scale(139.319);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, cos, epsilon, halfPi, sign, sin, tan} from \"./math\";\n\nexport function polyconicRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var tanPhi = tan(phi),\n      k = lambda * sin(phi);\n  return [\n    sin(k) / tanPhi,\n    phi + (1 - cos(k)) / tanPhi\n  ];\n}\n\npolyconicRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  var k = x * x + y * y,\n      phi = y * 0.5,\n      i = 10, delta;\n  do {\n    var tanPhi = tan(phi),\n        secPhi = 1 / cos(phi),\n        j = k - 2 * y * phi + phi * phi;\n    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n  } while (abs(delta) > epsilon && --i > 0);\n  tanPhi = tan(phi);\n  return [\n    (abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(polyconicRaw)\n      .scale(103.74);\n}\n","import {atan2, cos, sin, sqrt} from \"../math\";\n\n// Note: 6-element arrays are used to denote the 3x3 affine transform matrix:\n// [a, b, c,\n//  d, e, f,\n//  0, 0, 1] - this redundant row is left out.\n\n// Transform matrix for [a0, a1] -> [b0, b1].\nexport default function(a, b) {\n  var u = subtract(a[1], a[0]),\n      v = subtract(b[1], b[0]),\n      phi = angle(u, v),\n      s = length(u) / length(v);\n\n  return multiply([\n    1, 0, a[0][0],\n    0, 1, a[0][1]\n  ], multiply([\n    s, 0, 0,\n    0, s, 0\n  ], multiply([\n    cos(phi), sin(phi), 0,\n    -sin(phi), cos(phi), 0\n  ], [\n    1, 0, -b[0][0],\n    0, 1, -b[0][1]\n  ])));\n}\n\n// Inverts a transform matrix.\nexport function inverse(m) {\n  var k = 1 / (m[0] * m[4] - m[1] * m[3]);\n  return [\n    k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]),\n    -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])\n  ];\n}\n\n// Multiplies two 3x2 matrices.\nexport function multiply(a, b) {\n  return [\n    a[0] * b[0] + a[1] * b[3],\n    a[0] * b[1] + a[1] * b[4],\n    a[0] * b[2] + a[1] * b[5] + a[2],\n    a[3] * b[0] + a[4] * b[3],\n    a[3] * b[1] + a[4] * b[4],\n    a[3] * b[2] + a[4] * b[5] + a[5]\n  ];\n}\n\n// Subtracts 2D vectors.\nfunction subtract(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n}\n\n// Magnitude of a 2D vector.\nfunction length(v) {\n  return sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\n// Angle between two 2D vectors.\nfunction angle(a, b) {\n  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);\n}\n","import {geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, degrees, epsilon, pi, radians, sin} from \"../math\";\nimport {default as matrix, multiply, inverse} from \"./matrix\";\n\n// Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\n//  * r: rotation angle for final polyhedral net.  Defaults to -pi / 6 (for\n//    butterflies).\nexport default function(root, face, r) {\n\n  r = r == null ? -pi / 6 : r; // TODO automate\n\n  recurse(root, {transform: [\n    cos(r), sin(r), 0,\n    -sin(r), cos(r), 0\n  ]});\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face);\n    // Find shared edge.\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\n      // Replace shared edge in parent edges array.\n      var edges = parent.edges;\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n      edges = node.edges;\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n    if (node.children) {\n      node.children.forEach(function(child) {\n        recurse(child, node);\n      });\n    }\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n    if (t = node.transform) {\n      return [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        -(t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    point[1] = -point[1];\n    return point;\n  }\n\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n  if (hasInverse(root)) forward.invert = function(x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n    if (t) {\n      t = inverse(t);\n      point = [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        (t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function(stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return proj;\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {type: \"MultiPoint\", coordinates: node.face},\n      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),\n      b = bounds({type: \"MultiPoint\", coordinates: notPoles}),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0];\n  // TODO\n  var c = dx === 180 || dx === 360\n      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\n      : centroid(multiPoint);\n  // First find the shared edge…\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n}\n\n// Tests equality of two spherical points.\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n}\n\n// Finds a shared edge given two clockwise polygons.\nfunction sharedEdge(a, b) {\n  var x, y, n = a.length, found = null;\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n}\n\n// Converts an array of n face vertices to an array of n + 1 edges.\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}\n","// TODO generate on-the-fly to avoid external modification.\nvar octahedron = [\n  [0, 90],\n  [-90, 0], [0, 0], [90, 0], [180, 0],\n  [0, -90]\n];\n\nexport default [\n  [0, 2, 1],\n  [0, 3, 2],\n  [5, 1, 2],\n  [5, 2, 3],\n  [0, 1, 4],\n  [0, 4, 3],\n  [5, 4, 1],\n  [5, 3, 4]\n].map(function(face) {\n  return face.map(function(i) {\n    return octahedron[i];\n  });\n});\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {pi} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .scale(101.858)\n      .center([0, 45]);\n}\n","import {geoCentroid as centroid, geoProjection as projection} from \"d3-geo\";\nimport {collignonRaw} from \"../collignon\";\nimport {pi, sqrt} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nvar kx = 2 / sqrt(3);\n\nfunction collignonK(a, b) {\n  var p = collignonRaw(a, b);\n  return [p[0] * kx, p[1]];\n}\n\ncollignonK.invert = function(x,y) {\n  return collignonRaw.invert(x / kx, y);\n};\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return projection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .scale(121.906)\n      .center([0, 48.5904]);\n}\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {asin, atan2, cos, degrees, max, min, pi, radians, sin} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = face.length === 6 ? centroid({type: \"MultiPoint\", coordinates: face}) : face[0];\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var w5 = octahedron.map(function(face) {\n    var xyz = face.map(cartesian),\n        n = xyz.length,\n        a = xyz[n - 1],\n        b,\n        hexagon = [];\n    for (var i = 0; i < n; ++i) {\n      b = xyz[i];\n      hexagon.push(spherical([\n        a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794,\n        a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794,\n        a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794\n      ]), spherical([\n        b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794,\n        b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794,\n        b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794\n      ]));\n      a = b;\n    }\n    return hexagon;\n  });\n\n  var cornerNormals = [];\n\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n\n  w5.forEach(function(hexagon, j) {\n    var face = octahedron[j],\n        n = face.length,\n        normals = cornerNormals[j] = [];\n    for (var i = 0; i < n; ++i) {\n      w5.push([\n        face[i],\n        hexagon[(i * 2 + 2) % (2 * n)],\n        hexagon[(i * 2 + 1) % (2 * n)]\n      ]);\n      parents.push(j);\n      normals.push(cross(\n        cartesian(hexagon[(i * 2 + 2) % (2 * n)]),\n        cartesian(hexagon[(i * 2 + 1) % (2 * n)])\n      ));\n    }\n  });\n\n  var faces = w5.map(function(face) {\n    return {\n      project: faceProjection(face),\n      face: face\n    };\n  });\n\n  parents.forEach(function(d, i) {\n    var parent = faces[d];\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\n  });\n\n  function face(lambda, phi) {\n    var cosphi = cos(phi),\n        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4\n        : lambda < 0 ? phi < 0 ? 2 : 0\n        : lambda < pi / 2 ? phi < 0 ? 3 : 1\n        : phi < 0 ? 7 : 5;\n\n    var n = cornerNormals[hexagon];\n\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon\n        : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1\n        : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2\n        : hexagon];\n  }\n\n  return polyhedral(faces[0], face)\n      .scale(110.625)\n      .center([0,45]);\n}\n\nfunction dot(a, b) {\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\n  return s;\n}\n\nfunction cross(a, b) {\n  return [\n    a[1] * b[2] - a[2] * b[1],\n    a[2] * b[0] - a[0] * b[2],\n    a[0] * b[1] - a[1] * b[0]\n  ];\n}\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [\n    atan2(cartesian[1], cartesian[0]) * degrees,\n    asin(max(-1, min(1, cartesian[2]))) * degrees\n  ];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  var lambda = coordinates[0] * radians,\n      phi = coordinates[1] * radians,\n      cosphi = cos(phi);\n  return [\n    cosphi * cos(lambda),\n    cosphi * sin(lambda),\n    sin(phi)\n  ];\n}\n","export default function() {}\n","import {geoStream} from \"d3-geo\";\nimport noop from \"../noop\";\nimport clockwise from \"./clockwise\";\nimport contains from \"./contains\";\n\nexport default function(object, projection) {\n  var stream = projection.stream, project;\n  if (!stream) throw new Error(\"invalid projection\");\n  switch (object && object.type) {\n    case \"Feature\": project = projectFeature; break;\n    case \"FeatureCollection\": project = projectFeatureCollection; break;\n    default: project = projectGeometry; break;\n  }\n  return project(object, stream);\n}\n\nfunction projectFeatureCollection(o, stream) {\n  return {\n    type: \"FeatureCollection\",\n    features: o.features.map(function(f) {\n      return projectFeature(f, stream);\n    })\n  };\n}\n\nfunction projectFeature(o, stream) {\n  return {\n    type: \"Feature\",\n    id: o.id,\n    properties: o.properties,\n    geometry: projectGeometry(o.geometry, stream)\n  };\n}\n\nfunction projectGeometryCollection(o, stream) {\n  return {\n    type: \"GeometryCollection\",\n    geometries: o.geometries.map(function(o) {\n      return projectGeometry(o, stream);\n    })\n  };\n}\n\nfunction projectGeometry(o, stream) {\n  if (!o) return null;\n  if (o.type === \"GeometryCollection\") return projectGeometryCollection(o, stream);\n  var sink;\n  switch (o.type) {\n    case \"Point\": sink = sinkPoint; break;\n    case \"MultiPoint\": sink = sinkPoint; break;\n    case \"LineString\": sink = sinkLine; break;\n    case \"MultiLineString\": sink = sinkLine; break;\n    case \"Polygon\": sink = sinkPolygon; break;\n    case \"MultiPolygon\": sink = sinkPolygon; break;\n    case \"Sphere\": sink = sinkPolygon; break;\n    default: return null;\n  }\n  geoStream(o, stream(sink));\n  return sink.result();\n}\n\nvar points = [],\n    lines = [];\n\nvar sinkPoint = {\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  result: function() {\n    var result = !points.length ? null\n        : points.length < 2 ? {type: \"Point\", coordinates: points[0]}\n        : {type: \"MultiPoint\", coordinates: points};\n    points = [];\n    return result;\n  }\n};\n\nvar sinkLine = {\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    if (points.length) lines.push(points), points = [];\n  },\n  result: function() {\n    var result = !lines.length ? null\n        : lines.length < 2 ? {type: \"LineString\", coordinates: lines[0]}\n        : {type: \"MultiLineString\", coordinates: lines};\n    lines = [];\n    return result;\n  }\n};\n\nvar sinkPolygon = {\n  polygonStart: noop,\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    var n = points.length;\n    if (n) {\n      do points.push(points[0].slice()); while (++n < 4);\n      lines.push(points), points = [];\n    }\n  },\n  polygonEnd: noop,\n  result: function() {\n    if (!lines.length) return null;\n    var polygons = [],\n        holes = [];\n\n    // https://github.com/d3/d3/issues/1558\n    lines.forEach(function(ring) {\n      if (clockwise(ring)) polygons.push([ring]);\n      else holes.push(ring);\n    });\n\n    holes.forEach(function(hole) {\n      var point = hole[0];\n      polygons.some(function(polygon) {\n        if (contains(polygon[0], point)) {\n          polygon.push(hole);\n          return true;\n        }\n      }) || polygons.push([hole]);\n    });\n\n    lines = [];\n\n    return !polygons.length ? null\n        : polygons.length > 1 ? {type: \"MultiPolygon\", coordinates: polygons}\n        : {type: \"Polygon\", coordinates: polygons[0]};\n  }\n};\n","export default function(ring) {\n  if ((n = ring.length) < 4) return false;\n  var i = 0,\n      n,\n      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  return area <= 0;\n}\n","export default function(ring, point) {\n  var x = point[0],\n      y = point[1],\n      contains = false;\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i], xi = pi[0], yi = pi[1],\n        pj = ring[j], xj = pj[0], yj = pj[1];\n    if (((yi > y) ^ (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) contains = !contains;\n  }\n  return contains;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, halfPi, pi, sign, sqrt1_2} from \"../math\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectQuincuncial(lambda, phi) {\n    var t = abs(lambda) < halfPi,\n        p = project(t ? lambda : lambda > 0 ? lambda - pi : lambda + pi, phi),\n        x = (p[0] - p[1]) * sqrt1_2,\n        y = (p[0] + p[1]) * sqrt1_2;\n    if (t) return [x, y];\n    var d = dx * sqrt1_2,\n        s = x > 0 ^ y > 0 ? -1 : 1;\n    return [s * x - sign(y) * d, s * y - sign(x) * d];\n  }\n\n  if (project.invert) projectQuincuncial.invert = function(x0, y0) {\n    var x = (x0 + y0) * sqrt1_2,\n        y = (y0 - x0) * sqrt1_2,\n        t = abs(x) < 0.5 * dx && abs(y) < 0.5 * dx;\n\n    if (!t) {\n      var d = dx * sqrt1_2,\n          s = x > 0 ^ y > 0 ? -1 : 1,\n          x1 = -s * (x0 + (y > 0 ? 1 : -1) * d),\n          y1 = -s * (y0 + (x > 0 ? 1 : -1) * d);\n      x = (-x1 - y1) * sqrt1_2;\n      y = (x1 - y1) * sqrt1_2;\n    }\n\n    var p = project.invert(x, y);\n    if (!t) p[0] += x > 0 ? pi : -pi;\n    return p;\n  };\n\n  return projection(projectQuincuncial)\n      .rotate([-90, -90, 45])\n      .clipAngle(180 - 1e-3);\n}\n","import {gringortenRaw} from \"../gringorten\";\nimport quincuncial from \"./index\";\n\nexport default function() {\n  return quincuncial(gringortenRaw)\n      .scale(176.423);\n}\n","import {guyouRaw} from \"../guyou\";\nimport quincuncial from \"./index\";\n\nexport default function() {\n  return quincuncial(guyouRaw)\n      .scale(111.48);\n}\n","export default function(o, digits) {\n  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error(\"invalid digits\");\n\n  function quantizePoint(coordinates) {\n    coordinates[0] = +coordinates[0].toFixed(digits);\n    coordinates[1] = +coordinates[1].toFixed(digits);\n  }\n\n  function quantizePoints(coordinates) {\n    coordinates.forEach(quantizePoint);\n  }\n\n  function quantizePolygon(coordinates) {\n    coordinates.forEach(quantizePoints);\n  }\n\n  function quantizeGeometry(o) {\n    if (o) switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(quantizeGeometry); break;\n      case \"Point\": quantizePoint(o.coordinates); break;\n      case \"MultiPoint\": case \"LineString\": quantizePoints(o.coordinates); break;\n      case \"MultiLineString\": case \"Polygon\": quantizePolygon(o.coordinates); break;\n      case \"MultiPolygon\": o.coordinates.forEach(quantizePolygon); break;\n      default: return;\n    }\n  }\n\n  function quantizeFeature(o) {\n    quantizeGeometry(o.geometry);\n  }\n\n  if (o) switch (o.type) {\n    case \"Feature\": quantizeFeature(o); break;\n    case \"FeatureCollection\": o.features.forEach(quantizeFeature); break;\n    default: quantizeGeometry(o); break;\n  }\n\n  return o;\n}\n","import {abs, acos, asin, atan, cos, epsilon, pi, sin, tan} from \"./math\";\nimport parallel1 from \"./parallel1\";\n\nexport function rectangularPolyconicRaw(phi0) {\n  var sinPhi0 = sin(phi0);\n\n  function forward(lambda, phi) {\n    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;\n    if (!phi) return [2 * A, -phi0];\n    var E = 2 * atan(A * sin(phi)),\n        cotPhi = 1 / tan(phi);\n    return [\n      sin(E) * cotPhi,\n      phi + (1 - cos(E)) * cotPhi - phi0\n    ];\n  }\n\n  // TODO return null for points outside outline.\n  forward.invert = function(x, y) {\n    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];\n    var k = x * x + y * y,\n        phi = 0,\n        i = 10, delta;\n    do {\n      var tanPhi = tan(phi),\n          secPhi = 1 / cos(phi),\n          j = k - 2 * y * phi + phi * phi;\n      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n    } while (abs(delta) > epsilon && --i > 0);\n    var E = x * (tanPhi = tan(phi)),\n        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);\n    return [\n      sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(rectangularPolyconicRaw)\n      .scale(131.215);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon2, floor, halfPi, max, min, pi, radians} from \"./math\";\n\nvar K = [\n  [0.9986, -0.062],\n  [1.0000, 0.0000],\n  [0.9986, 0.0620],\n  [0.9954, 0.1240],\n  [0.9900, 0.1860],\n  [0.9822, 0.2480],\n  [0.9730, 0.3100],\n  [0.9600, 0.3720],\n  [0.9427, 0.4340],\n  [0.9216, 0.4958],\n  [0.8962, 0.5571],\n  [0.8679, 0.6176],\n  [0.8350, 0.6769],\n  [0.7986, 0.7346],\n  [0.7597, 0.7903],\n  [0.7186, 0.8435],\n  [0.6732, 0.8936],\n  [0.6213, 0.9394],\n  [0.5722, 0.9761],\n  [0.5322, 1.0000]\n];\n\nK.forEach(function(d) {\n  d[1] *= 1.0144;\n});\n\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [\n    lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    (phi > 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)\n  ];\n}\n\nrobinsonRaw.invert = function(x, y) {\n  var yy = y / halfPi,\n      phi = yy * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(yy) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50, delta;\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = (y >= 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n      break;\n    }\n  } while (--i0 >= 0);\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [\n    x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    phi * radians\n  ];\n};\n\nexport default function() {\n  return projection(robinsonRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, radians, sin, sqrt} from \"./math\";\n\nfunction satelliteVerticalRaw(P) {\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = (P - 1) / (P - cosPhi * cos(lambda));\n    return [\n      k * cosPhi * sin(lambda),\n      k * sin(phi)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + y * y,\n        rho = sqrt(rho2),\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\n    return [\n      atan2(x * sinc, rho * sqrt(1 - sinc * sinc)),\n      rho ? asin(y * sinc / rho) : 0\n    ];\n  };\n\n  return forward;\n}\n\nexport function satelliteRaw(P, omega) {\n  var vertical = satelliteVerticalRaw(P);\n  if (!omega) return vertical;\n  var cosOmega = cos(omega),\n      sinOmega = sin(omega);\n\n  function forward(lambda, phi) {\n    var coordinates = vertical(lambda, phi),\n        y = coordinates[1],\n        A = y * sinOmega / (P - 1) + cosOmega;\n    return [\n      coordinates[0] * cosOmega / A,\n      y / A\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var k = (P - 1) / (P - 1 - y * sinOmega);\n    return vertical.invert(k * x, k * y * cosOmega);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var distance = 2,\n      omega = 0,\n      m = projectionMutator(satelliteRaw),\n      p = m(distance, omega);\n\n  // As a multiple of radius.\n  p.distance = function(_) {\n    if (!arguments.length) return distance;\n    return m(distance = +_, omega);\n  };\n\n  p.tilt = function(_) {\n    if (!arguments.length) return omega * degrees;\n    return m(distance, omega = _ * radians);\n  };\n\n  return p\n      .scale(432.147)\n      .clipAngle(acos(1 / distance) * degrees - 1e-6);\n}\n","var epsilon = 1e-4,\n    epsilonInverse = 1e4,\n    x0 = -180, x0e = x0 + epsilon,\n    x1 = 180, x1e = x1 - epsilon,\n    y0 = -90, y0e = y0 + epsilon,\n    y1 = 90, y1e = y1 - epsilon;\n\nfunction quantize(x) {\n  return Math.floor(x * epsilonInverse) / epsilonInverse;\n}\n\nfunction normalizePoint(y) {\n  return y === y0 || y === y1\n      ? [0, y] // pole\n      : [x0, quantize(y)]; // antimeridian\n}\n\nfunction clampPoint(p) {\n  if (p[0] <= x0e) p[0] = x0;\n  else if (p[0] >= x1e) p[0] = x1;\n  if (p[1] <= y0e) p[1] = y0;\n  else if (p[1] >= y1e) p[1] = y1;\n}\n\nfunction clampPoints(points) {\n  points.forEach(clampPoint);\n}\n\n// For each ring, detect where it crosses the antimeridian or pole.\nfunction extractFragments(polygon, fragments) {\n  for (var j = 0, m = polygon.length; j < m; ++j) {\n    var ring = polygon[j];\n    ring.polygon = polygon;\n\n    // By default, assume that this ring doesn’t need any stitching.\n    fragments.push(ring);\n\n    for (var i = 0, n = ring.length; i < n; ++i) {\n      var point = ring[i],\n          x = point[0],\n          y = point[1];\n\n      // If this is an antimeridian or polar point…\n      if (x <= x0e || x >= x1e || y <= y0e || y >= y1e) {\n        clampPoint(point);\n\n        // Advance through any antimeridian or polar points…\n        for (var k = i + 1; k < n; ++k) {\n          var pointk = ring[k],\n              xk = pointk[0],\n              yk = pointk[1];\n          if (xk > x0e && xk < x1e && yk > y0e && yk < y1e) break;\n        }\n\n        // If this was just a single antimeridian or polar point,\n        // we don’t need to cut this ring into a fragment;\n        // we can just leave it as-is.\n        if (k === i + 1) continue;\n\n        // Otherwise, if this is not the first point in the ring,\n        // cut the current fragment so that it ends at the current point.\n        // The current point is also normalized for later joining.\n        if (i) {\n          var fragmentBefore = ring.slice(0, i + 1);\n          fragmentBefore.polygon = polygon;\n          fragmentBefore[fragmentBefore.length - 1] = normalizePoint(y);\n          fragments[fragments.length - 1] = fragmentBefore;\n        }\n\n        // If the ring started with an antimeridian fragment,\n        // we can ignore that fragment entirely.\n        else fragments.pop();\n\n        // If the remainder of the ring is an antimeridian fragment,\n        // move on to the next ring.\n        if (k >= n) break;\n\n        // Otherwise, add the remaining ring fragment and continue.\n        fragments.push(ring = ring.slice(k - 1));\n        ring[0] = normalizePoint(ring[0][1]);\n        ring.polygon = polygon;\n        i = -1;\n        n = ring.length;\n      }\n    }\n  }\n  polygon.length = 0;\n}\n\n// Now stitch the fragments back together into rings.\n// TODO remove empty polygons.\nfunction stitchFragments(fragments) {\n  var i, n = fragments.length;\n\n  // To connect the fragments start-to-end, create a simple index by end.\n  var fragmentByStart = {},\n      fragmentByEnd = {},\n      fragment,\n      start,\n      startFragment,\n      end,\n      endFragment;\n\n  // For each fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    start = fragment[0];\n    end = fragment[fragment.length - 1];\n\n    // If this fragment is closed, add it as a standalone ring.\n    if (start[0] === end[0] && start[1] === end[1]) {\n      fragment.polygon.push(fragment);\n      fragments[i] = null;\n      continue;\n    }\n\n    fragment.index = i;\n    fragmentByStart[start] = fragmentByEnd[end] = fragment;\n  }\n\n  // For each open fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    if (fragment) {\n      start = fragment[0];\n      end = fragment[fragment.length - 1];\n      startFragment = fragmentByEnd[start];\n      endFragment = fragmentByStart[end];\n\n      delete fragmentByStart[start];\n      delete fragmentByEnd[end];\n\n      // If this fragment is closed, add it as a standalone ring.\n      if (start[0] === end[0] && start[1] === end[1]) {\n        fragment.polygon.push(fragment);\n        continue;\n      }\n\n      if (startFragment) {\n        delete fragmentByEnd[start];\n        delete fragmentByStart[startFragment[0]];\n        startFragment.pop(); // drop the shared coordinate\n        fragments[startFragment.index] = null;\n        fragment = startFragment.concat(fragment);\n        fragment.polygon = startFragment.polygon;\n\n        if (startFragment === endFragment) {\n          // Connect both ends to this single fragment to create a ring.\n          fragment.polygon.push(fragment);\n        } else {\n          fragment.index = n++;\n          fragments.push(fragmentByStart[fragment[0]] = fragmentByEnd[fragment[fragment.length - 1]] = fragment);\n        }\n      } else if (endFragment) {\n        delete fragmentByStart[end];\n        delete fragmentByEnd[endFragment[endFragment.length - 1]];\n        fragment.pop(); // drop the shared coordinate\n        fragment = fragment.concat(endFragment);\n        fragment.polygon = endFragment.polygon;\n        fragment.index = n++;\n        fragments[endFragment.index] = null;\n        fragments.push(fragmentByStart[fragment[0]] = fragmentByEnd[fragment[fragment.length - 1]] = fragment);\n      } else {\n        fragment.push(fragment[0]); // close ring\n        fragment.polygon.push(fragment);\n      }\n    }\n  }\n}\n\nfunction stitchFeature(o) {\n  stitchGeometry(o.geometry);\n}\n\nfunction stitchGeometry(o) {\n  if (!o) return;\n  var fragments, i, n;\n\n  switch (o.type) {\n    case \"GeometryCollection\": {\n      o.geometries.forEach(stitchGeometry);\n      return;\n    }\n    case \"Point\": {\n      clampPoint(o.coordinates);\n      break;\n    }\n    case \"MultiPoint\":\n    case \"LineString\": {\n      clampPoints(o.coordinates);\n      break;\n    }\n    case \"MultiLineString\": {\n      o.coordinates.forEach(clampPoints);\n      break;\n    }\n    case \"Polygon\": {\n      extractFragments(o.coordinates, fragments = []);\n      break;\n    }\n    case \"MultiPolygon\": {\n      fragments = [], i = -1, n = o.coordinates.length;\n      while (++i < n) extractFragments(o.coordinates[i], fragments);\n      break;\n    }\n    default: return;\n  }\n\n  stitchFragments(fragments);\n}\n\nexport default function(o) {\n  if (o) switch (o.type) {\n    case \"Feature\": stitchFeature(o); break;\n    case \"FeatureCollection\": o.features.forEach(stitchFeature); break;\n    default: stitchGeometry(o); break;\n  }\n  return o;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, quarterPi, sin, tan} from \"./math\";\n\nexport function timesRaw(lambda, phi) {\n  var t = tan(phi / 2),\n      s = sin(quarterPi * t);\n  return [\n    lambda * (0.74482 - 0.34588 * s * s),\n    1.70711 * t\n  ];\n}\n\ntimesRaw.invert = function(x, y) {\n  var t = y / 1.70711,\n      s = sin(quarterPi * t);\n  return [\n    x / (0.74482 - 0.34588 * s * s),\n    2 * atan(t)\n  ];\n};\n\nexport default function() {\n  return projection(timesRaw)\n      .scale(146.153);\n}\n","import {geoInterpolate as interpolate, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {asin, degrees, pi, sin, radians} from \"./math\";\n\n// Compute the origin as the midpoint of the two reference points.\n// Rotate one of the reference points by the origin.\n// Apply the spherical law of sines to compute gamma rotation.\nexport default function(raw, p0, p1) {\n  var i = interpolate(p0, p1),\n      o = i(0.5),\n      a = rotation([-o[0], -o[1]])(p0),\n      b = i.distance / 2,\n      y = -asin(sin(a[1] * radians) / sin(b)),\n      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],\n      p = projection(raw(b)).rotate(R),\n      r = rotation(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoGnomonicRaw as gnomonicRaw} from \"d3-geo\";\nimport {cos} from \"./math\";\nimport twoPoint from \"./twoPoint\";\n\nexport function twoPointAzimuthalRaw(d) {\n  var cosd = cos(d);\n\n  function forward(lambda, phi) {\n    var coordinates = gnomonicRaw(lambda, phi);\n    coordinates[0] *= cosd;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    return gnomonicRaw.invert(x / cosd, y);\n  };\n\n  return forward;\n}\n\nexport function twoPointAzimuthalUsa() {\n  return twoPointAzimuthal([-158, 21.5], [-77, 39])\n      .clipAngle(60)\n      .scale(400);\n}\n\nexport default function twoPointAzimuthal(p0, p1) {\n  return twoPoint(twoPointAzimuthalRaw, p0, p1);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {acos, atan2, cos, sin, sqrt, tan} from \"./math\";\nimport twoPoint from \"./twoPoint\";\n\n// TODO clip to ellipse\nexport function twoPointEquidistantRaw(z0) {\n  if (!(z0 *= 2)) return azimuthalEquidistantRaw;\n  var lambdaa = -z0 / 2,\n      lambdab = -lambdaa,\n      z02 = z0 * z0,\n      tanLambda0 = tan(lambdab),\n      S = 0.5 / sin(lambdab);\n\n  function forward(lambda, phi) {\n    var za = acos(cos(phi) * cos(lambda - lambdaa)),\n        zb = acos(cos(phi) * cos(lambda - lambdab)),\n        ys = phi < 0 ? -1 : 1;\n    za *= za, zb *= zb;\n    return [\n      (za - zb) / (2 * z0),\n      ys * sqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y2 = y * y,\n        cosza = cos(sqrt(y2 + (t = x + lambdaa) * t)),\n        coszb = cos(sqrt(y2 + (t = x + lambdab) * t)),\n        t,\n        d;\n    return [\n      atan2(d = cosza - coszb, t = (cosza + coszb) * tanLambda0),\n      (y < 0 ? -1 : 1) * acos(sqrt(t * t + d * d) * S)\n    ];\n  };\n\n  return forward;\n}\n\nexport function twoPointEquidistantUsa() {\n  return twoPointEquidistant([-158, 21.5], [-77, 39])\n      .clipAngle(130)\n      .scale(122.571);\n}\n\nexport default function twoPointEquidistant(p0, p1) {\n  return twoPoint(twoPointEquidistantRaw, p0, p1);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrintenRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      G = cosTheta / (sinTheta + cosTheta - 1),\n      P = G * (2 / sinTheta - 1),\n      P2 = P * P,\n      P2_A2 = P2 + A2,\n      G_P2 = G - P2,\n      Q = A2 + G;\n  return [\n    sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,\n    sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2\n  ];\n}\n\nvanDerGrintenRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x2 = (x /= pi) * x,\n      y2 = (y /= pi) * y,\n      x2_y2 = x2 + y2,\n      z = x2_y2 * x2_y2,\n      c1 = -abs(y) * (1 + x2_y2),\n      c2 = c1 - 2 * y2 + x2,\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\n      m1 = 2 * sqrt(-a1 / 3),\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\n  return [\n    pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x),\n    sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrintenRaw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [\n    sign(lambda) * pi * x1,\n    sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))\n  ];\n}\n\nvanDerGrinten2Raw.invert = function(x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [\n    sign(x) * pi * (B - A),\n    sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten2Raw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [\n    pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),\n    pi * y1\n  ];\n}\n\nvanDerGrinten3Raw.invert = function(x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [\n    x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,\n    halfPi * sin(2 * atan(y1))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten3Raw)\n        .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, halfPi, pi, sign, sqrt} from \"./math\";\n\nexport function vanDerGrinten4Raw(lambda, phi) {\n  if (!phi) return [lambda, 0];\n  var phi0 = abs(phi);\n  if (!lambda || phi0 === halfPi) return [0, phi];\n  var B = phi0 / halfPi,\n      B2 = B * B,\n      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n      C2 = C * C,\n      BC = B * C,\n      B_C2 = B2 + C2 + 2 * BC,\n      B_3C = B + 3 * C,\n      lambda0 = lambda / halfPi,\n      lambda1 = lambda0 + 1 / lambda0,\n      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),\n      D2 = D * D,\n      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),\n      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);\n  return [\n    sign(lambda) * halfPi * x1,\n    sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)\n  ];\n}\n\nvanDerGrinten4Raw.invert = function(x, y) {\n  var delta;\n  if (!x || !y) return [x, y];\n  y /= pi;\n  var x1 = sign(x) * x / halfPi,\n      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),\n      D2 = D * D,\n      B = 2 * y,\n      i = 50;\n  do {\n    var B2 = B * B,\n        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),\n        C2 = C * C,\n        BC = B * C,\n        B_C = B + C,\n        B_C2 = B_C * B_C,\n        B_3C = B + 3 * C,\n        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),\n        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),\n        sqrtF = sqrt(F),\n        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),\n        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\n    B -= delta = f / f_;\n  } while (delta > epsilon && --i > 0);\n  return [\n    sign(x) * (sqrt(D * D + 4) + D) * pi / 4,\n    halfPi * B\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten4Raw)\n      .scale(127.16);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {sqrt, pi} from \"./math\";\nimport {mollweideBromleyRaw} from \"./mollweide\";\n\nvar A = 4 * pi + 3 * sqrt(3),\n    B = 2 * sqrt(2 * pi * sqrt(3) / A);\n\nexport var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);\n\nexport default function() {\n  return projection(wagner4Raw)\n      .scale(176.84);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math\";\n\nexport function wagner6Raw(lambda, phi) {\n  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];\n}\n\nwagner6Raw.invert = function(x, y) {\n  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];\n};\n\nexport default function() {\n  return projection(wagner6Raw)\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt, tan} from \"./math\";\n\nexport function wagner7Raw(lambda, phi) {\n  var s = 0.90631 * sin(phi),\n      c0 = sqrt(1 - s * s),\n      c1 = sqrt(2 / (1 + c0 * cos(lambda /= 3)));\n  return [\n    2.66723 * c0 * c1 * sin(lambda),\n    1.24104 * s * c1\n  ];\n}\n\nwagner7Raw.invert = function(x, y) {\n  var t1 = x / 2.66723,\n      t2 = y / 1.24104,\n      p = sqrt(t1 * t1 + t2 * t2),\n      c = 2 * asin(p / 2);\n  return [\n    3 * atan2(x * tan(c), 2.66723 * p),\n    p && asin(y * sin(c) / (1.24104 * 0.90631 * p))\n  ];\n};\n\nexport default function() {\n  return projection(wagner7Raw)\n      .scale(172.632);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function wiechelRaw(lambda, phi) {\n  var cosPhi = cos(phi),\n      sinPhi = cos(lambda) * cosPhi,\n      sin1_Phi = 1 - sinPhi,\n      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),\n      sinLambda = sin(lambda);\n  cosPhi = sqrt(1 - sinPhi * sinPhi);\n  return [\n    sinLambda * cosPhi - cosLambda * sin1_Phi,\n    -cosLambda * cosPhi - sinLambda * sin1_Phi\n  ];\n}\n\nwiechelRaw.invert = function(x, y) {\n  var w = (x * x + y * y) / -2,\n      k = sqrt(-w * (2 + w)),\n      b = y * w + x * k,\n      a = x * w - y * k,\n      D = sqrt(a * a + b * b);\n  return [\n    atan2(k * b, D * (1 + w)),\n    D ? -asin(k * a / D) : 0\n  ];\n};\n\nexport default function() {\n  return projection(wiechelRaw)\n      .rotate([0, -90, 45])\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {aitoffRaw} from \"./aitoff\";\nimport {halfPi, epsilon, sin, cos, sqrt, abs, acos} from \"./math\";\n\nexport function winkel3Raw(lambda, phi) {\n  var coordinates = aitoffRaw(lambda, phi);\n  return [\n    (coordinates[0] + lambda / halfPi) / 2,\n    (coordinates[1] + phi) / 2\n  ];\n}\n\nwinkel3Raw.invert = function(x, y) {\n  var lambda = x, phi = y, i = 25;\n  do {\n    var cosphi = cos(phi),\n        sinphi = sin(phi),\n        sin_2phi = sin(2 * phi),\n        sin2phi = sinphi * sinphi,\n        cos2phi = cosphi * cosphi,\n        sinlambda = sin(lambda),\n        coslambda_2 = cos(lambda / 2),\n        sinlambda_2 = sin(lambda / 2),\n        sin2lambda_2 = sinlambda_2 * sinlambda_2,\n        C = 1 - cos2phi * coslambda_2 * coslambda_2,\n        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,\n        F,\n        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,\n        fy = 0.5 * (E * sinphi + phi) - y,\n        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,\n        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),\n        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),\n        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,\n        denominator = dxdphi * dydlambda - dydphi * dxdlambda,\n        dlambda = (fy * dxdphi - fx * dydphi) / denominator,\n        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;\n    lambda -= dlambda, phi -= dphi;\n  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(winkel3Raw)\n      .scale(158.837);\n}\n","export default function(x) {\n  return x;\n}\n","import identity from \"./identity\";\n\nexport default function(topology) {\n  if ((transform = topology.transform) == null) return identity;\n  var transform,\n      x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(point, i) {\n    if (!i) x0 = y0 = 0;\n    point[0] = (x0 += point[0]) * kx + dx;\n    point[1] = (y0 += point[1]) * ky + dy;\n    return point;\n  };\n}\n","import transform from \"./transform\";\n\nexport default function(topology) {\n  var bbox = topology.bbox;\n\n  function bboxPoint(p0) {\n    p1[0] = p0[0], p1[1] = p0[1], t(p1);\n    if (p1[0] < x0) x0 = p1[0];\n    if (p1[0] > x1) x1 = p1[0];\n    if (p1[1] < y0) y0 = p1[1];\n    if (p1[1] > y1) y1 = p1[1];\n  }\n\n  function bboxGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(bboxGeometry); break;\n      case \"Point\": bboxPoint(o.coordinates); break;\n      case \"MultiPoint\": o.coordinates.forEach(bboxPoint); break;\n    }\n  }\n\n  if (!bbox) {\n    var t = transform(topology), p0, p1 = new Array(2), name,\n        x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;\n\n    topology.arcs.forEach(function(arc) {\n      var i = -1, n = arc.length;\n      while (++i < n) {\n        p0 = arc[i], p1[0] = p0[0], p1[1] = p0[1], t(p1, i);\n        if (p1[0] < x0) x0 = p1[0];\n        if (p1[0] > x1) x1 = p1[0];\n        if (p1[1] < y0) y0 = p1[1];\n        if (p1[1] > y1) y1 = p1[1];\n      }\n    });\n\n    for (name in topology.objects) {\n      bboxGeometry(topology.objects[name]);\n    }\n\n    bbox = topology.bbox = [x0, y0, x1, y1];\n  }\n\n  return bbox;\n}\n","export default function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n","import reverse from \"./reverse\";\nimport transform from \"./transform\";\n\nexport default function(topology, o) {\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature(topology, o); })}\n      : feature(topology, o);\n}\n\nexport function feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nexport function object(topology, o) {\n  var transformPoint = transform(topology),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k].slice(), k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p.slice());\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0].slice());\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0].slice());\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n","export default function(topology, arcs) {\n  var stitchedArcs = {},\n      fragmentByStart = {},\n      fragmentByEnd = {},\n      fragments = [],\n      emptyIndex = -1;\n\n  // Stitch empty arcs first, since they may be subsumed by other arcs.\n  arcs.forEach(function(i, j) {\n    var arc = topology.arcs[i < 0 ? ~i : i], t;\n    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n    }\n  });\n\n  arcs.forEach(function(i) {\n    var e = ends(i),\n        start = e[0],\n        end = e[1],\n        f, g;\n\n    if (f = fragmentByEnd[start]) {\n      delete fragmentByEnd[f.end];\n      f.push(i);\n      f.end = end;\n      if (g = fragmentByStart[end]) {\n        delete fragmentByStart[g.start];\n        var fg = g === f ? f : f.concat(g);\n        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else if (f = fragmentByStart[end]) {\n      delete fragmentByStart[f.start];\n      f.unshift(i);\n      f.start = start;\n      if (g = fragmentByEnd[start]) {\n        delete fragmentByEnd[g.end];\n        var gf = g === f ? f : g.concat(f);\n        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else {\n      f = [i];\n      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n    }\n  });\n\n  function ends(i) {\n    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n    else p1 = arc[arc.length - 1];\n    return i < 0 ? [p1, p0] : [p0, p1];\n  }\n\n  function flush(fragmentByEnd, fragmentByStart) {\n    for (var k in fragmentByEnd) {\n      var f = fragmentByEnd[k];\n      delete fragmentByStart[f.start];\n      delete f.start;\n      delete f.end;\n      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n      fragments.push(f);\n    }\n  }\n\n  flush(fragmentByEnd, fragmentByStart);\n  flush(fragmentByStart, fragmentByEnd);\n  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\n  return fragments;\n}\n","import {object} from \"./feature\";\nimport stitch from \"./stitch\";\n\nexport default function(topology) {\n  return object(topology, meshArcs.apply(this, arguments));\n}\n\nexport function meshArcs(topology, object, filter) {\n  var arcs, i, n;\n  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);\n  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;\n  return {type: \"MultiLineString\", arcs: stitch(topology, arcs)};\n}\n\nfunction extractArcs(topology, object, filter) {\n  var arcs = [],\n      geomsByArc = [],\n      geom;\n\n  function extract0(i) {\n    var j = i < 0 ? ~i : i;\n    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\n  }\n\n  function extract1(arcs) {\n    arcs.forEach(extract0);\n  }\n\n  function extract2(arcs) {\n    arcs.forEach(extract1);\n  }\n\n  function extract3(arcs) {\n    arcs.forEach(extract2);\n  }\n\n  function geometry(o) {\n    switch (geom = o, o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"LineString\": extract1(o.arcs); break;\n      case \"MultiLineString\": case \"Polygon\": extract2(o.arcs); break;\n      case \"MultiPolygon\": extract3(o.arcs); break;\n    }\n  }\n\n  geometry(object);\n\n  geomsByArc.forEach(filter == null\n      ? function(geoms) { arcs.push(geoms[0].i); }\n      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\n\n  return arcs;\n}\n","import {object} from \"./feature\";\nimport stitch from \"./stitch\";\n\nfunction planarRingArea(ring) {\n  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;\n  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];\n  return Math.abs(area); // Note: doubled area!\n}\n\nexport default function(topology) {\n  return object(topology, mergeArcs.apply(this, arguments));\n}\n\nexport function mergeArcs(topology, objects) {\n  var polygonsByArc = {},\n      polygons = [],\n      groups = [];\n\n  objects.forEach(geometry);\n\n  function geometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"Polygon\": extract(o.arcs); break;\n      case \"MultiPolygon\": o.arcs.forEach(extract); break;\n    }\n  }\n\n  function extract(polygon) {\n    polygon.forEach(function(ring) {\n      ring.forEach(function(arc) {\n        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\n      });\n    });\n    polygons.push(polygon);\n  }\n\n  function area(ring) {\n    return planarRingArea(object(topology, {type: \"Polygon\", arcs: [ring]}).coordinates[0]);\n  }\n\n  polygons.forEach(function(polygon) {\n    if (!polygon._) {\n      var group = [],\n          neighbors = [polygon];\n      polygon._ = 1;\n      groups.push(group);\n      while (polygon = neighbors.pop()) {\n        group.push(polygon);\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\n              if (!polygon._) {\n                polygon._ = 1;\n                neighbors.push(polygon);\n              }\n            });\n          });\n        });\n      }\n    }\n  });\n\n  polygons.forEach(function(polygon) {\n    delete polygon._;\n  });\n\n  return {\n    type: \"MultiPolygon\",\n    arcs: groups.map(function(polygons) {\n      var arcs = [], n;\n\n      // Extract the exterior (unique) arcs.\n      polygons.forEach(function(polygon) {\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\n              arcs.push(arc);\n            }\n          });\n        });\n      });\n\n      // Stitch the arcs into one or more rings.\n      arcs = stitch(topology, arcs);\n\n      // If more than one ring is returned,\n      // at most one of these rings can be the exterior;\n      // choose the one with the greatest absolute area.\n      if ((n = arcs.length) > 1) {\n        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {\n          if ((ki = area(arcs[i])) > k) {\n            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;\n          }\n        }\n      }\n\n      return arcs;\n    })\n  };\n}\n","export default function(a, x) {\n  var lo = 0, hi = a.length;\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (a[mid] < x) lo = mid + 1;\n    else hi = mid;\n  }\n  return lo;\n}\n","import bisect from \"./bisect\";\n\nexport default function(objects) {\n  var indexesByArc = {}, // arc index -> array of object indexes\n      neighbors = objects.map(function() { return []; });\n\n  function line(arcs, i) {\n    arcs.forEach(function(a) {\n      if (a < 0) a = ~a;\n      var o = indexesByArc[a];\n      if (o) o.push(i);\n      else indexesByArc[a] = [i];\n    });\n  }\n\n  function polygon(arcs, i) {\n    arcs.forEach(function(arc) { line(arc, i); });\n  }\n\n  function geometry(o, i) {\n    if (o.type === \"GeometryCollection\") o.geometries.forEach(function(o) { geometry(o, i); });\n    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\n  }\n\n  var geometryType = {\n    LineString: line,\n    MultiLineString: polygon,\n    Polygon: polygon,\n    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\n  };\n\n  objects.forEach(geometry);\n\n  for (var i in indexesByArc) {\n    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\n      for (var k = j + 1; k < m; ++k) {\n        var ij = indexes[j], ik = indexes[k], n;\n        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\n        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\n      }\n    }\n  }\n\n  return neighbors;\n}\n","import bbox from \"./bbox\";\n\nexport default function(topology, n) {\n  if (!((n = Math.floor(n)) >= 2)) throw new Error(\"n must be ≥2\");\n  if (topology.transform) throw new Error(\"already quantized\");\n  var bb = bbox(topology), name,\n      dx = bb[0], kx = (bb[2] - dx) / (n - 1) || 1,\n      dy = bb[1], ky = (bb[3] - dy) / (n - 1) || 1;\n\n  function quantizePoint(p) {\n    p[0] = Math.round((p[0] - dx) / kx);\n    p[1] = Math.round((p[1] - dy) / ky);\n  }\n\n  function quantizeGeometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(quantizeGeometry); break;\n      case \"Point\": quantizePoint(o.coordinates); break;\n      case \"MultiPoint\": o.coordinates.forEach(quantizePoint); break;\n    }\n  }\n\n  topology.arcs.forEach(function(arc) {\n    var i = 1,\n        j = 1,\n        n = arc.length,\n        pi = arc[0],\n        x0 = pi[0] = Math.round((pi[0] - dx) / kx),\n        y0 = pi[1] = Math.round((pi[1] - dy) / ky),\n        pj,\n        x1,\n        y1;\n\n    for (; i < n; ++i) {\n      pi = arc[i];\n      x1 = Math.round((pi[0] - dx) / kx);\n      y1 = Math.round((pi[1] - dy) / ky);\n      if (x1 !== x0 || y1 !== y0) {\n        pj = arc[j++];\n        pj[0] = x1 - x0, x0 = x1;\n        pj[1] = y1 - y0, y0 = y1;\n      }\n    }\n\n    if (j < 2) {\n      pj = arc[j++];\n      pj[0] = 0;\n      pj[1] = 0;\n    }\n\n    arc.length = j;\n  });\n\n  for (name in topology.objects) {\n    quantizeGeometry(topology.objects[name]);\n  }\n\n  topology.transform = {\n    scale: [kx, ky],\n    translate: [dx, dy]\n  };\n\n  return topology;\n}\n","import identity from \"./identity\";\n\nexport default function(topology) {\n  if ((transform = topology.transform) == null) return identity;\n  var transform,\n      x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(point, i) {\n    if (!i) x0 = y0 = 0;\n    var x1 = Math.round((point[0] - dx) / kx),\n        y1 = Math.round((point[1] - dy) / ky);\n    point[0] = x1 - x0, x0 = x1;\n    point[1] = y1 - y0, y0 = y1;\n    return point;\n  };\n}\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ComposableMap = require(\"./ComposableMap\");\n\nObject.defineProperty(exports, \"ComposableMap\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_ComposableMap).default;\n  }\n});\n\nvar _ZoomableGroup = require(\"./ZoomableGroup\");\n\nObject.defineProperty(exports, \"ZoomableGroup\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_ZoomableGroup).default;\n  }\n});\n\nvar _ZoomableGlobe = require(\"./ZoomableGlobe\");\n\nObject.defineProperty(exports, \"ZoomableGlobe\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_ZoomableGlobe).default;\n  }\n});\n\nvar _Geographies = require(\"./Geographies\");\n\nObject.defineProperty(exports, \"Geographies\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Geographies).default;\n  }\n});\n\nvar _Geography = require(\"./Geography\");\n\nObject.defineProperty(exports, \"Geography\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Geography).default;\n  }\n});\n\nvar _Marker = require(\"./Marker\");\n\nObject.defineProperty(exports, \"Marker\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Marker).default;\n  }\n});\n\nvar _Markers = require(\"./Markers\");\n\nObject.defineProperty(exports, \"Markers\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Markers).default;\n  }\n});\n\nvar _Line = require(\"./Line\");\n\nObject.defineProperty(exports, \"Line\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Line).default;\n  }\n});\n\nvar _Lines = require(\"./Lines\");\n\nObject.defineProperty(exports, \"Lines\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Lines).default;\n  }\n});\n\nvar _MapGroup = require(\"./MapGroup\");\n\nObject.defineProperty(exports, \"MapGroup\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_MapGroup).default;\n  }\n});\n\nvar _Annotation = require(\"./Annotation\");\n\nObject.defineProperty(exports, \"Annotation\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Annotation).default;\n  }\n});\n\nvar _Annotations = require(\"./Annotations\");\n\nObject.defineProperty(exports, \"Annotations\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Annotations).default;\n  }\n});\n\nvar _Graticule = require(\"./Graticule\");\n\nObject.defineProperty(exports, \"Graticule\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Graticule).default;\n  }\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = {\n  scale: 160,\n  xOffset: 0,\n  yOffset: 0,\n  rotation: [0, 0, 0],\n  precision: 0.1\n};"],"sourceRoot":""}